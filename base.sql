-- phpMyAdmin SQL Dump
-- version 4.1.14.8
-- http://www.phpmyadmin.net
--
-- Généré le :  Lun 23 Juillet 2018 à 18:23
-- Version du serveur :  5.5.60-0+deb7u1-log
-- Version de PHP :  5.4.45-0+deb7u14

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;

--
-- Base de données :  `**SECRET**`
--

-- --------------------------------------------------------

--
-- Structure de la table `chapter`
--

CREATE TABLE IF NOT EXISTS `chapter` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `label` varchar(120) NOT NULL,
  `description` varchar(120) DEFAULT NULL,
  `classe` int(100) NOT NULL,
  KEY `id` (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=5 ;

--
-- Contenu de la table `chapter`
--

INSERT INTO `chapter` (`id`, `label`, `description`, `classe`) VALUES
(1, 'Maths', 'Maths', 17),
(2, 'Algo avanc&eacute;e', '', 12),
(3, 'ANGLAIS', '', 16),
(4, 'Histoire/G&eacute;o', '', 13);

-- --------------------------------------------------------

--
-- Structure de la table `classe`
--

CREATE TABLE IF NOT EXISTS `classe` (
  `id` int(10) NOT NULL AUTO_INCREMENT,
  `classname` varchar(255) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `id` (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=19 ;

--
-- Contenu de la table `classe`
--

INSERT INTO `classe` (`id`, `classname`) VALUES
(12, 'TERM S1'),
(13, 'TERM ES1'),
(14, 'TERM L1'),
(15, 'PREM S1'),
(16, 'PREM L1'),
(17, 'SND A'),
(18, 'SND B');

-- --------------------------------------------------------

--
-- Structure de la table `classeteacher`
--

CREATE TABLE IF NOT EXISTS `classeteacher` (
  `id` int(100) NOT NULL AUTO_INCREMENT,
  `classe` int(100) NOT NULL,
  `teacher` int(100) NOT NULL,
  KEY `id` (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=16 ;

--
-- Contenu de la table `classeteacher`
--

INSERT INTO `classeteacher` (`id`, `classe`, `teacher`) VALUES
(3, 12, 2),
(6, 14, 11),
(8, 13, 8),
(9, 13, 9),
(10, 12, 6),
(11, 12, 7),
(12, 15, 7),
(13, 16, 10),
(14, 17, 11),
(15, 18, 6);

-- --------------------------------------------------------

--
-- Structure de la table `course`
--

CREATE TABLE IF NOT EXISTS `course` (
  `id` int(25) NOT NULL AUTO_INCREMENT,
  `title` varchar(255) NOT NULL,
  `content` longtext NOT NULL,
  `teacher` int(25) NOT NULL,
  `chapter` int(25) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=6 ;

--
-- Contenu de la table `course`
--

INSERT INTO `course` (`id`, `title`, `content`, `teacher`, `chapter`) VALUES
(1, 'Les matrices ', '&lt;h3&gt;D&amp;Eacute;FINITION&lt;/h3&gt;\r\n\r\n&lt;p&gt;Une&amp;nbsp;&lt;strong&gt;matrice&lt;/strong&gt;&amp;nbsp;de dimension (ou d&amp;rsquo;&lt;em&gt;ordre&lt;/em&gt;&amp;nbsp;or de&amp;nbsp;&lt;em&gt;taille&lt;/em&gt;)&amp;nbsp;n\\times pn&amp;times;p&amp;nbsp;est un tableau de nombres r&amp;eacute;els (appel&amp;eacute;s coefficients ou termes) comportant&amp;nbsp;nn&amp;nbsp;lignes et&amp;nbsp;ppcolonnes.&lt;/p&gt;\r\n\r\n&lt;p&gt;Si on d&amp;eacute;signe par&amp;nbsp;a_{ij}aâ€‹ijâ€‹â€‹&amp;nbsp;le coefficient situ&amp;eacute; &amp;agrave; la&amp;nbsp;ii-i&amp;egrave;me ligne et la&amp;nbsp;jj-i&amp;egrave;me colonne la matrice s&amp;rsquo;&amp;eacute;crira :&lt;/p&gt;\r\n\r\n&lt;p&gt;A=\\begin{pmatrix} a_{11} &amp;amp; a_{12} &amp;amp; \\ldots &amp;amp; a_{1p}\\\\ a_{21} &amp;amp; a_{22} &amp;amp; \\ldots &amp;amp; a_{2p} \\\\ \\vdots &amp;amp; \\vdots &amp;amp; \\ddots &amp;amp; \\vdots\\\\ a_{n1} &amp;amp; a_{n2} &amp;amp; \\ldots &amp;amp; a_{np} \\end{pmatrix}.A=â€‹âŽâ€‹âŽœâ€‹âŽœâ€‹âŽ›â€‹â€‹â€‹aâ€‹11â€‹â€‹â€‹aâ€‹21â€‹â€‹â€‹â‹®â€‹aâ€‹n1â€‹â€‹â€‹â€‹â€‹aâ€‹12â€‹â€‹â€‹aâ€‹22â€‹â€‹â€‹â‹®â€‹aâ€‹n2â€‹â€‹â€‹â€‹â€‹&amp;hellip;â€‹&amp;hellip;â€‹â‹±â€‹&amp;hellip;â€‹â€‹â€‹aâ€‹1pâ€‹â€‹â€‹aâ€‹2pâ€‹â€‹â€‹â‹®â€‹aâ€‹npâ€‹â€‹â€‹â€‹â€‹âŽ â€‹âŽŸâ€‹âŽŸâ€‹âŽžâ€‹â€‹.&lt;/p&gt;\r\n\r\n&lt;h3&gt;EXEMPLE&lt;/h3&gt;\r\n\r\n&lt;p&gt;La matrice&amp;nbsp;A=\\begin{pmatrix} 1 &amp;amp; 2 &amp;amp; 3 \\\\ 4 &amp;amp; 5 &amp;amp; 6 \\end{pmatrix}A=(â€‹1â€‹4â€‹â€‹â€‹2â€‹5â€‹â€‹â€‹3â€‹6â€‹â€‹)&amp;nbsp;est une matrice de dimension&amp;nbsp;2\\times 32&amp;times;3.&lt;/p&gt;\r\n\r\n&lt;h3&gt;NOTATIONS&lt;/h3&gt;\r\n\r\n&lt;p&gt;On notera, en abr&amp;eacute;g&amp;eacute;,&amp;nbsp;A=\\left(a_{ij}\\right)A=(aâ€‹ijâ€‹â€‹)&amp;nbsp;la matrice dont le coefficient situ&amp;eacute; &amp;agrave; la&amp;nbsp;ii-&amp;egrave;me ligne et la&amp;nbsp;jj-i&amp;egrave;me colonne est&amp;nbsp;a_{ij}aâ€‹ijâ€‹â€‹.&lt;/p&gt;\r\n\r\n&lt;h3&gt;D&amp;Eacute;FINITIONS&lt;/h3&gt;\r\n\r\n&lt;ul&gt;\r\n	&lt;li&gt;\r\n	&lt;p&gt;&amp;nbsp;Une matrice&amp;nbsp;&lt;strong&gt;carr&amp;eacute;e&lt;/strong&gt;&amp;nbsp;est une matrice dont le nombre de lignes est &amp;eacute;gal au nombre de colonnes.&lt;/p&gt;\r\n	&lt;/li&gt;\r\n	&lt;li&gt;\r\n	&lt;p&gt;&amp;nbsp;Une matrice&amp;nbsp;&lt;strong&gt;ligne&lt;/strong&gt;&amp;nbsp;est une matrice dont le nombre de lignes est &amp;eacute;gal &amp;agrave;&amp;nbsp;11.&lt;/p&gt;\r\n	&lt;/li&gt;\r\n	&lt;li&gt;\r\n	&lt;p&gt;&amp;nbsp;Une matrice&amp;nbsp;&lt;strong&gt;colonne&lt;/strong&gt;&amp;nbsp;est une matrice dont le nombre de colonnes est &amp;eacute;gal &amp;agrave;&amp;nbsp;11.&lt;/p&gt;\r\n	&lt;/li&gt;\r\n&lt;/ul&gt;\r\n\r\n&lt;h3&gt;EXEMPLES&lt;/h3&gt;\r\n\r\n&lt;ul&gt;\r\n	&lt;li&gt;\r\n	&lt;p&gt;&amp;nbsp;La matrice&amp;nbsp;A=\\begin{pmatrix} 1 &amp;amp; 2 \\\\ 1 &amp;amp; 2 \\end{pmatrix}A=(â€‹1â€‹1â€‹â€‹â€‹2â€‹2â€‹â€‹)&amp;nbsp;est une matrice carr&amp;eacute;e (de dimension&amp;nbsp;2\\times 22&amp;times;2&amp;nbsp;&amp;ndash; ou on peut dire, plus simplement, de dimension 2).&lt;/p&gt;\r\n	&lt;/li&gt;\r\n	&lt;li&gt;\r\n	&lt;p&gt;&amp;nbsp;La matrice&amp;nbsp;B=\\begin{pmatrix}1 &amp;amp; 2 &amp;amp; 0,5 \\end{pmatrix}B=(â€‹1â€‹â€‹â€‹2â€‹â€‹â€‹0,5â€‹â€‹)&amp;nbsp;est une matrice ligne (de dimension&amp;nbsp;1\\times 31&amp;times;3).&lt;/p&gt;\r\n	&lt;/li&gt;\r\n	&lt;li&gt;\r\n	&lt;p&gt;&amp;nbsp;La matrice&amp;nbsp;C=\\begin{pmatrix} 1 \\\\ 2 \\\\ 0 \\\\ 4 \\end{pmatrix}C=â€‹âŽâ€‹âŽœâ€‹âŽœâ€‹âŽ›â€‹â€‹â€‹1â€‹2â€‹0â€‹4â€‹â€‹â€‹âŽ â€‹âŽŸâ€‹âŽŸâ€‹âŽžâ€‹â€‹&amp;nbsp;est une matrice colonne (de dimension&amp;nbsp;4\\times 14&amp;times;1).&lt;/p&gt;\r\n	&lt;/li&gt;\r\n&lt;/ul&gt;\r\n\r\n&lt;h3&gt;REMARQUE&lt;/h3&gt;\r\n\r\n&lt;p&gt;Pour une matrice carr&amp;eacute;e, on appelle&amp;nbsp;&lt;strong&gt;diagonale principale&lt;/strong&gt;, la diagonale qui relie le coin situ&amp;eacute; en haut &amp;agrave; gauche au coin situ&amp;eacute; en bas &amp;agrave; droite. Sur l&amp;rsquo;exemple ci-dessous, les coefficients de la diagonale principale sont marqu&amp;eacute;s en rouge :&lt;/p&gt;\r\n\r\n&lt;p&gt;A=\\begin{pmatrix} \\color{red}{1} &amp;amp; 2 &amp;amp; 3 &amp;amp; 4 \\\\ 2 &amp;amp; \\color{red}{3} &amp;amp; 4 &amp;amp; 5 \\\\ 3 &amp;amp; 4 &amp;amp; \\color{red}{5} &amp;amp; 6 \\\\ 4 &amp;amp; 5 &amp;amp; 6 &amp;amp; \\color{red}{7} \\end{pmatrix}A=â€‹âŽâ€‹âŽœâ€‹âŽœâ€‹âŽ›â€‹â€‹â€‹1â€‹2â€‹3â€‹4â€‹â€‹â€‹2â€‹3â€‹4â€‹5â€‹â€‹â€‹3â€‹4â€‹5â€‹6â€‹â€‹â€‹4â€‹5â€‹6â€‹7â€‹â€‹â€‹âŽ â€‹âŽŸâ€‹âŽŸâ€‹âŽžâ€‹â€‹.&lt;/p&gt;\r\n\r\n&lt;h3&gt;D&amp;Eacute;FINITIONS&lt;/h3&gt;\r\n\r\n&lt;ul&gt;\r\n	&lt;li&gt;\r\n	&lt;p&gt;&amp;nbsp;La matrice&amp;nbsp;&lt;strong&gt;nulle&lt;/strong&gt;&amp;nbsp;de dimension&amp;nbsp;n\\times pn&amp;times;p&amp;nbsp;est la matrice de dimension&amp;nbsp;n\\times pn&amp;times;p&amp;nbsp;dont tous les coefficients sont nuls.&lt;/p&gt;\r\n	&lt;/li&gt;\r\n	&lt;li&gt;\r\n	&lt;p&gt;&amp;nbsp;Une matrice&amp;nbsp;&lt;strong&gt;diagonale&lt;/strong&gt;&amp;nbsp;est une matrice carr&amp;eacute;e dont tout les coefficients situ&amp;eacute;s en dehors de la diagonale principale sont nuls.&lt;/p&gt;\r\n	&lt;/li&gt;\r\n	&lt;li&gt;\r\n	&lt;p&gt;&amp;nbsp;La matrice&amp;nbsp;&lt;strong&gt;unit&amp;eacute;&lt;/strong&gt;&amp;nbsp;de dimension&amp;nbsp;nn&amp;nbsp;est la matrice carr&amp;eacute;e de dimension&amp;nbsp;nn&amp;nbsp;qui contient des&amp;nbsp;11&amp;nbsp;sur la diagonale principale et des&amp;nbsp;00&amp;nbsp;ailleurs :&lt;/p&gt;\r\n\r\n	&lt;p&gt;A=\\begin{pmatrix} 1 &amp;amp; 0 &amp;amp; \\ldots &amp;amp; 0\\\\ 0 &amp;amp; 1 &amp;amp; \\ldots &amp;amp; 0\\\\ \\vdots &amp;amp; \\vdots &amp;amp; \\ddots &amp;amp; \\vdots\\\\ 0 &amp;amp; 0 &amp;amp; \\ldots &amp;amp; 1 \\end{pmatrix}A=â€‹âŽâ€‹âŽœâ€‹âŽœâ€‹âŽ›â€‹â€‹â€‹1â€‹0â€‹â‹®â€‹0â€‹â€‹â€‹0â€‹1â€‹â‹®â€‹0â€‹â€‹â€‹&amp;hellip;â€‹&amp;hellip;â€‹â‹±â€‹&amp;hellip;â€‹â€‹â€‹0â€‹0â€‹â‹®â€‹1â€‹â€‹â€‹âŽ â€‹âŽŸâ€‹âŽŸâ€‹âŽžâ€‹â€‹.&lt;/p&gt;\r\n	&lt;/li&gt;\r\n&lt;/ul&gt;\r\n\r\n&lt;h3&gt;EXEMPLES&lt;/h3&gt;\r\n\r\n&lt;ul&gt;\r\n	&lt;li&gt;\r\n	&lt;p&gt;&amp;nbsp;La matrice&amp;nbsp;A=\\begin{pmatrix} 1 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 \\\\ 0 &amp;amp; 2 &amp;amp; 0 &amp;amp; 0 \\\\ 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 \\\\ 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 1 \\end{pmatrix}A=â€‹âŽâ€‹âŽœâ€‹âŽœâ€‹âŽ›â€‹â€‹â€‹1â€‹0â€‹0â€‹0â€‹â€‹â€‹0â€‹2â€‹0â€‹0â€‹â€‹â€‹0â€‹0â€‹0â€‹0â€‹â€‹â€‹0â€‹0â€‹0â€‹1â€‹â€‹â€‹âŽ â€‹âŽŸâ€‹âŽŸâ€‹âŽžâ€‹â€‹&amp;nbsp;est une matrice diagonale d&amp;rsquo;ordre 4.&lt;/p&gt;\r\n	&lt;/li&gt;\r\n	&lt;li&gt;\r\n	&lt;p&gt;&amp;nbsp;La matrice unit&amp;eacute; d&amp;rsquo;ordre 2 est&amp;nbsp;I_{2}=\\begin{pmatrix} 1 &amp;amp; 0 \\\\ 0 &amp;amp; 1 \\end{pmatrix}Iâ€‹2â€‹â€‹=(â€‹1â€‹0â€‹â€‹â€‹0â€‹1â€‹â€‹).&lt;/p&gt;\r\n	&lt;/li&gt;\r\n&lt;/ul&gt;\r\n\r\n&lt;h2&gt;2. OP&amp;Eacute;RATIONS SUR LES MATRICES&lt;/h2&gt;\r\n\r\n&lt;h3&gt;D&amp;Eacute;FINITION (SOMME DE MATRICES)&lt;/h3&gt;\r\n\r\n&lt;p&gt;Soient&amp;nbsp;AA&amp;nbsp;et&amp;nbsp;BB&amp;nbsp;deux matrices de m&amp;ecirc;me dimension.&lt;/p&gt;\r\n\r\n&lt;p&gt;La somme&amp;nbsp;A+BA+B&amp;nbsp;des matrices&amp;nbsp;AA&amp;nbsp;et&amp;nbsp;BB&amp;nbsp;s&amp;rsquo;obtient en ajoutant les coefficients de&amp;nbsp;AAaux coefficients de&amp;nbsp;BB&amp;nbsp;situ&amp;eacute;s&amp;nbsp;&lt;strong&gt;&amp;agrave; la m&amp;ecirc;me position&lt;/strong&gt;.&lt;/p&gt;\r\n\r\n&lt;h3&gt;EXEMPLE&lt;/h3&gt;\r\n\r\n&lt;p&gt;Soient&amp;nbsp;A=\\begin{pmatrix} 2 &amp;amp; -2 &amp;amp; 1 \\\\ -1 &amp;amp; 1 &amp;amp; 0 \\end{pmatrix}A=(â€‹2â€‹&amp;minus;1â€‹â€‹â€‹&amp;minus;2â€‹1â€‹â€‹â€‹1â€‹0â€‹â€‹)&amp;nbsp;et&amp;nbsp;B=\\begin{pmatrix} -1 &amp;amp; 1 &amp;amp; 1 \\\\ -2 &amp;amp; 2 &amp;amp; 0 \\end{pmatrix}B=(â€‹&amp;minus;1â€‹&amp;minus;2â€‹â€‹â€‹1â€‹2â€‹â€‹â€‹1â€‹0â€‹â€‹).&lt;/p&gt;\r\n\r\n&lt;p&gt;Alors :&lt;/p&gt;\r\n\r\n&lt;p&gt;A+B=\\begin{pmatrix}2-1&amp;amp;-2+1&amp;amp;1+1\\\\-1-2&amp;amp;1+2&amp;amp;0+0\\end{pmatrix}=\\begin{pmatrix}1&amp;amp;-1&amp;amp;2\\\\-3&amp;amp;3&amp;amp;0\\end{pmatrix}A+B=(â€‹2&amp;minus;1â€‹&amp;minus;1&amp;minus;2â€‹â€‹â€‹&amp;minus;2+1â€‹1+2â€‹â€‹â€‹1+1â€‹0+0â€‹â€‹)=(â€‹1â€‹&amp;minus;3â€‹â€‹â€‹&amp;minus;1â€‹3â€‹â€‹â€‹2â€‹0â€‹â€‹).&lt;/p&gt;\r\n\r\n&lt;h3&gt;REMARQUES&lt;/h3&gt;\r\n\r\n&lt;ul&gt;\r\n	&lt;li&gt;\r\n	&lt;p&gt;&amp;nbsp;On ne peut additionner deux matrices que si elles ont les m&amp;ecirc;me dimensions, c&amp;rsquo;est &amp;agrave; dire le m&amp;ecirc;me nombre de lignes et le m&amp;ecirc;me nombre de colonnes.&lt;/p&gt;\r\n	&lt;/li&gt;\r\n	&lt;li&gt;\r\n	&lt;p&gt;&amp;nbsp;On d&amp;eacute;finit de mani&amp;egrave;re analogue la diff&amp;eacute;rence de deux matrices.&lt;/p&gt;\r\n	&lt;/li&gt;\r\n&lt;/ul&gt;\r\n\r\n&lt;h3&gt;D&amp;Eacute;FINITION (PRODUIT D&amp;rsquo;UNE MATRICE PAR UN NOMBRE R&amp;Eacute;EL)&lt;/h3&gt;\r\n\r\n&lt;p&gt;Soient&amp;nbsp;AA&amp;nbsp;une matrice et&amp;nbsp;kk&amp;nbsp;un nombre r&amp;eacute;el..&lt;/p&gt;\r\n\r\n&lt;p&gt;Le produit&amp;nbsp;kAkA&amp;nbsp;est la matrice obtenue en multipliant chacun des coefficients de&amp;nbsp;AA&amp;nbsp;par&amp;nbsp;kk.&lt;/p&gt;\r\n\r\n&lt;h3&gt;EXEMPLE&lt;/h3&gt;\r\n\r\n&lt;p&gt;Si&amp;nbsp;A=\\begin{pmatrix} 1 &amp;amp; 1 &amp;amp; 0 \\\\ 2 &amp;amp; 0 &amp;amp; 0 \\end{pmatrix}A=(â€‹1â€‹2â€‹â€‹â€‹1â€‹0â€‹â€‹â€‹0â€‹0â€‹â€‹)&amp;nbsp;alors :&lt;/p&gt;\r\n\r\n&lt;ul&gt;\r\n	&lt;li&gt;\r\n	&lt;p&gt;&amp;nbsp;2A=\\begin{pmatrix} 2\\times 1 &amp;amp; 2\\times 1 &amp;amp; 2\\times 0 \\\\ 2\\times 2 &amp;amp; 2\\times 0 &amp;amp; 2\\times 0\\end{pmatrix}=\\begin{pmatrix}2 &amp;amp; 2 &amp;amp; 0 \\\\ 4 &amp;amp; 0 &amp;amp; 0\\end{pmatrix}2A=(â€‹2&amp;times;1â€‹2&amp;times;2â€‹â€‹â€‹2&amp;times;1â€‹2&amp;times;0â€‹â€‹â€‹2&amp;times;0â€‹2&amp;times;0â€‹â€‹)=(â€‹2â€‹4â€‹â€‹â€‹2â€‹0â€‹â€‹â€‹0â€‹0â€‹â€‹).&lt;/p&gt;\r\n	&lt;/li&gt;\r\n	&lt;li&gt;\r\n	&lt;p&gt;&amp;nbsp;-A=-1\\times A=\\begin{pmatrix} -1 &amp;amp; -1 &amp;amp; 0 \\\\ -2 &amp;amp; 0 &amp;amp; 0 \\end{pmatrix}&amp;minus;A=&amp;minus;1&amp;times;A=(â€‹&amp;minus;1â€‹&amp;minus;2â€‹â€‹â€‹&amp;minus;1â€‹0â€‹â€‹â€‹0â€‹0â€‹â€‹).&lt;/p&gt;\r\n	&lt;/li&gt;\r\n&lt;/ul&gt;\r\n\r\n&lt;h3&gt;PROPRI&amp;Eacute;T&amp;Eacute;S&lt;/h3&gt;\r\n\r\n&lt;p&gt;Soient&amp;nbsp;AA,&amp;nbsp;BB&amp;nbsp;et&amp;nbsp;CC&amp;nbsp;trois matrices de m&amp;ecirc;mes dimensions et&amp;nbsp;kk&amp;nbsp;et&amp;nbsp;k^{\\prime}kâ€‹&amp;prime;â€‹â€‹&amp;nbsp;deux r&amp;eacute;els.&lt;/p&gt;\r\n\r\n&lt;ul&gt;\r\n	&lt;li&gt;\r\n	&lt;p&gt;&amp;nbsp;A+B = B+AA+B=B+A&amp;nbsp;(commutativit&amp;eacute; de l&amp;rsquo;addition) ;&lt;/p&gt;\r\n	&lt;/li&gt;\r\n	&lt;li&gt;\r\n	&lt;p&gt;&amp;nbsp;\\left(A+B\\right)+C = A+\\left(B+C\\right)(A+B)+C=A+(B+C)&amp;nbsp;(associativit&amp;eacute; de l&amp;rsquo;addition) ;&lt;/p&gt;\r\n	&lt;/li&gt;\r\n	&lt;li&gt;\r\n	&lt;p&gt;&amp;nbsp;k\\left(A+B\\right) = kA+kBk(A+B)=kA+kB&amp;nbsp;;&lt;/p&gt;\r\n	&lt;/li&gt;\r\n	&lt;li&gt;\r\n	&lt;p&gt;&amp;nbsp;\\left(k+k^{\\prime}\\right)A = kA+k^{\\prime}A(k+kâ€‹&amp;prime;â€‹â€‹)A=kA+kâ€‹&amp;prime;â€‹â€‹A&amp;nbsp;;&lt;/p&gt;\r\n	&lt;/li&gt;\r\n	&lt;li&gt;\r\n	&lt;p&gt;&amp;nbsp;k\\left(k^{\\prime}A\\right) = \\left(kk^{\\prime}\\right)Ak(kâ€‹&amp;prime;â€‹â€‹A)=(kkâ€‹&amp;prime;â€‹â€‹)A.&lt;/p&gt;\r\n	&lt;/li&gt;\r\n&lt;/ul&gt;\r\n\r\n&lt;h3&gt;D&amp;Eacute;FINITION (PRODUIT D&amp;rsquo;UNE MATRICE LIGNE PAR UNE MATRICE COLONNE)&lt;/h3&gt;\r\n\r\n&lt;p&gt;Soient&amp;nbsp;A=\\left(a_{1} a_{2} \\cdots a_{n}\\right)A=(aâ€‹1â€‹â€‹aâ€‹2â€‹â€‹â‹¯aâ€‹nâ€‹â€‹)&amp;nbsp;une matrice ligne&amp;nbsp;1\\times n1&amp;times;n&amp;nbsp;et&amp;nbsp;B=\\begin{pmatrix} b_{1} \\\\ b_{2} \\\\ \\cdots \\\\ b_{n} \\end{pmatrix}B=â€‹âŽâ€‹âŽœâ€‹âŽœâ€‹âŽ›â€‹â€‹â€‹bâ€‹1â€‹â€‹â€‹bâ€‹2â€‹â€‹â€‹â‹¯â€‹bâ€‹nâ€‹â€‹â€‹â€‹â€‹âŽ â€‹âŽŸâ€‹âŽŸâ€‹âŽžâ€‹â€‹&amp;nbsp;une matrice colonne&amp;nbsp;n\\times 1n&amp;times;1. Le produit de&amp;nbsp;AA&amp;nbsp;par&amp;nbsp;BB&amp;nbsp;est le nombre r&amp;eacute;el :&lt;/p&gt;\r\n\r\n&lt;p&gt;A\\times B = \\left(a_{1} a_{2} \\cdots a_{n}\\right)\\times \\begin{pmatrix} b_{1} \\\\ b_{2} \\\\ \\cdots \\\\ b_{n} \\end{pmatrix} = a_{1}b_{1} + a_{2}b_{2} + \\cdots + a_{n}b_{n}A&amp;times;B=(aâ€‹1â€‹â€‹aâ€‹2â€‹â€‹â‹¯aâ€‹nâ€‹â€‹)&amp;times;â€‹âŽâ€‹âŽœâ€‹âŽœâ€‹âŽ›â€‹â€‹â€‹bâ€‹1â€‹â€‹â€‹bâ€‹2â€‹â€‹â€‹â‹¯â€‹bâ€‹nâ€‹â€‹â€‹â€‹â€‹âŽ â€‹âŽŸâ€‹âŽŸâ€‹âŽžâ€‹â€‹=aâ€‹1â€‹â€‹bâ€‹1â€‹â€‹+aâ€‹2â€‹â€‹bâ€‹2â€‹â€‹+â‹¯+aâ€‹nâ€‹â€‹bâ€‹nâ€‹â€‹.&lt;/p&gt;\r\n\r\n&lt;h3&gt;REMARQUE&lt;/h3&gt;\r\n\r\n&lt;ul&gt;\r\n	&lt;li&gt;\r\n	&lt;p&gt;&amp;nbsp;Les deux matrices&amp;nbsp;AA&amp;nbsp;et&amp;nbsp;BB&amp;nbsp;doivent avoir le m&amp;ecirc;me nombre&amp;nbsp;nn&amp;nbsp;de coefficients.&lt;/p&gt;\r\n	&lt;/li&gt;\r\n	&lt;li&gt;\r\n	&lt;p&gt;&amp;nbsp;Pour cette formule, la matrice ligne doit &amp;ecirc;tre imp&amp;eacute;rativement en premier !&lt;/p&gt;\r\n	&lt;/li&gt;\r\n&lt;/ul&gt;\r\n\r\n&lt;h3&gt;EXEMPLE&lt;/h3&gt;\r\n\r\n&lt;p&gt;Si&amp;nbsp;A=\\left(1 2 3 4\\right)A=(1234)&amp;nbsp;et&amp;nbsp;B=\\begin{pmatrix} 5 \\\\ 6 \\\\ 7 \\\\ 8 \\end{pmatrix}B=â€‹âŽâ€‹âŽœâ€‹âŽœâ€‹âŽ›â€‹â€‹â€‹5â€‹6â€‹7â€‹8â€‹â€‹â€‹âŽ â€‹âŽŸâ€‹âŽŸâ€‹âŽžâ€‹â€‹&amp;nbsp;:&lt;/p&gt;\r\n\r\n&lt;p&gt;A\\times B = 1\\times 5 + 2\\times 6 + 3\\times 7 + 4\\times 8 = 5 + 12 + 21 + 32 = 70A&amp;times;B=1&amp;times;5+2&amp;times;6+3&amp;times;7+4&amp;times;8=5+12+21+32=70.&lt;/p&gt;\r\n\r\n&lt;h3&gt;D&amp;Eacute;FINITION (PRODUIT DE DEUX MATRICES)&lt;/h3&gt;\r\n\r\n&lt;p&gt;Soient&amp;nbsp;A=\\left(a_{ij}\\right)A=(aâ€‹ijâ€‹â€‹)&amp;nbsp;une matrice&amp;nbsp;n\\times pn&amp;times;p&amp;nbsp;et&amp;nbsp;B=\\left(b_{ij}\\right)B=(bâ€‹ijâ€‹â€‹)&amp;nbsp;une matrice&amp;nbsp;p\\times qp&amp;times;q. Le produit de&amp;nbsp;AA&amp;nbsp;par&amp;nbsp;BB&amp;nbsp;est la matrice&amp;nbsp;C=\\left(c_{ij}\\right)C=(câ€‹ijâ€‹â€‹)&amp;nbsp;&amp;agrave;&amp;nbsp;nn&amp;nbsp;lignes et&amp;nbsp;qq&amp;nbsp;colonnes dont le coefficient situ&amp;eacute; &amp;agrave; la&amp;nbsp;ii-i&amp;egrave;me ligne et la&amp;nbsp;jj-i&amp;egrave;me colonne est obtenu en multipliant la&amp;nbsp;ii-i&amp;egrave;me ligne de A par la&amp;nbsp;jj-i&amp;egrave;me colonne de B.&lt;/p&gt;\r\n\r\n&lt;p&gt;C&amp;rsquo;est &amp;agrave; dire que pour tout&amp;nbsp;1 \\leqslant i \\leqslant n1â©½iâ©½n&amp;nbsp;et tout&amp;nbsp;1 \\leqslant j \\leqslant q1â©½jâ©½q&amp;nbsp;:&lt;/p&gt;\r\n\r\n&lt;p&gt;c_{ij} = a_{i1}b_{1j} + a_{i2}b_{2j} + \\cdots + a_{ip}b_{pj}câ€‹ijâ€‹â€‹=aâ€‹i1â€‹â€‹bâ€‹1jâ€‹â€‹+aâ€‹i2â€‹â€‹bâ€‹2jâ€‹â€‹+â‹¯+aâ€‹ipâ€‹â€‹bâ€‹pjâ€‹â€‹.&lt;/p&gt;\r\n\r\n&lt;h3&gt;REMARQUE&lt;/h3&gt;\r\n\r\n&lt;p&gt;Faites bien attention aux dimensions des matrices : Le nombre de colonnes de la premi&amp;egrave;re matrice doit &amp;ecirc;tre &amp;eacute;gal au nombre de lignes de la seconde pour que le calcul soit possible.&lt;/p&gt;\r\n\r\n&lt;p&gt;Par exemple, le produit d&amp;rsquo;une matrice&amp;nbsp;2\\times \\color{red}{3}2&amp;times;3&amp;nbsp;par une matrice&amp;nbsp;\\color{red}{3}\\times 43&amp;times;4&amp;nbsp;est possible et donnera une matrice&amp;nbsp;2\\times 42&amp;times;4.&lt;/p&gt;\r\n\r\n&lt;p&gt;Par contre, le produit d&amp;rsquo;une matrice&amp;nbsp;2\\times \\color{red}{3}2&amp;times;3&amp;nbsp;par une matrice&amp;nbsp;\\color{red}{2}\\times 32&amp;times;3&amp;nbsp;n&amp;rsquo;est pas possible.&lt;/p&gt;\r\n\r\n&lt;h3&gt;EXEMPLE&lt;/h3&gt;\r\n\r\n&lt;p&gt;Calculons le produit&amp;nbsp;C=A\\times BC=A&amp;times;B&amp;nbsp;avec :&lt;/p&gt;\r\n\r\n&lt;p&gt;A=\\begin{pmatrix} 2 &amp;amp; 4 \\\\ 1 &amp;amp; 0 \\end{pmatrix}A=(â€‹2â€‹1â€‹â€‹â€‹4â€‹0â€‹â€‹)&amp;nbsp;et&amp;nbsp;B=\\begin{pmatrix} -1 &amp;amp; 0 &amp;amp; 2 \\\\ -2 &amp;amp; 1 &amp;amp; 0 \\end{pmatrix}B=(â€‹&amp;minus;1â€‹&amp;minus;2â€‹â€‹â€‹0â€‹1â€‹â€‹â€‹2â€‹0â€‹â€‹).&lt;/p&gt;\r\n\r\n&lt;p&gt;Ce calcul est possible car le nombre de colonnes de&amp;nbsp;AA&amp;nbsp;est &amp;eacute;gal au nombre de lignes de&amp;nbsp;BB. Le r&amp;eacute;sultat&amp;nbsp;CC&amp;nbsp;sera une matrice&amp;nbsp;2\\times 32&amp;times;3&amp;nbsp;(\\color{red}{2}\\times 22&amp;times;2par2\\times \\color{red}{3} \\rightarrow \\color{red}{2}\\times \\color{red}{3}2&amp;times;3&amp;rarr;2&amp;times;3).&lt;/p&gt;\r\n\r\n&lt;p&gt;Notons&amp;nbsp;C=\\begin{pmatrix} c_{11} &amp;amp; c_{12} &amp;amp; c_{13} \\\\ c_{21} &amp;amp; c_{22} &amp;amp; c_{23} \\end{pmatrix}C=(â€‹câ€‹11â€‹â€‹â€‹câ€‹21â€‹â€‹â€‹â€‹â€‹câ€‹12â€‹â€‹â€‹câ€‹22â€‹â€‹â€‹â€‹â€‹câ€‹13â€‹â€‹â€‹câ€‹23â€‹â€‹â€‹â€‹).&lt;/p&gt;\r\n\r\n&lt;p&gt;Pour calculer&amp;nbsp;c_{11}câ€‹11â€‹â€‹&amp;nbsp;on multiplie la premi&amp;egrave;re ligne de&amp;nbsp;AA&amp;nbsp;et la premi&amp;egrave;re colonne de&amp;nbsp;BB&amp;nbsp;:&lt;/p&gt;\r\n\r\n&lt;p&gt;C=\\begin{pmatrix} \\color{red}{2} &amp;amp; \\color{red}{4} \\\\ 1 &amp;amp; 0\\end{pmatrix}\\times \\begin{pmatrix} \\color{red}{-1} &amp;amp; 0 &amp;amp; 2 \\\\ \\color{red}{-2} &amp;amp; 1 &amp;amp; 0\\end{pmatrix}C=(â€‹2â€‹1â€‹â€‹â€‹4â€‹0â€‹â€‹)&amp;times;(â€‹&amp;minus;1â€‹&amp;minus;2â€‹â€‹â€‹0â€‹1â€‹â€‹â€‹2â€‹0â€‹â€‹)&amp;nbsp;;&lt;/p&gt;\r\n\r\n&lt;p&gt;on a donc&amp;nbsp;c_{11}=2\\times \\left(-1\\right)+4\\times \\left(-2\\right)=-2-8=-10câ€‹11â€‹â€‹=2&amp;times;(&amp;minus;1)+4&amp;times;(&amp;minus;2)=&amp;minus;2&amp;minus;8=&amp;minus;10.&lt;/p&gt;\r\n\r\n&lt;p&gt;C=\\begin{pmatrix} \\color{red}{2} &amp;amp; \\color{red}{4} \\\\ 1 &amp;amp; 0 \\end{pmatrix}\\times \\begin{pmatrix}\\color{red}{-1} &amp;amp; 0 &amp;amp; 2 \\\\ \\color{red}{-2} &amp;amp; 1 &amp;amp; 0 \\end{pmatrix}=\\begin{pmatrix}\\color{red}{-10} &amp;amp; \\cdots &amp;amp; \\cdots \\\\ \\cdots &amp;amp; \\cdots &amp;amp; \\cdots \\end{pmatrix}C=(â€‹2â€‹1â€‹â€‹â€‹4â€‹0â€‹â€‹)&amp;times;(â€‹&amp;minus;1â€‹&amp;minus;2â€‹â€‹â€‹0â€‹1â€‹â€‹â€‹2â€‹0â€‹â€‹)=(â€‹&amp;minus;10â€‹â‹¯â€‹â€‹â€‹â‹¯â€‹â‹¯â€‹â€‹â€‹â‹¯â€‹â‹¯â€‹â€‹).&lt;/p&gt;\r\n\r\n&lt;p&gt;Pour calculer&amp;nbsp;c_{12}câ€‹12â€‹â€‹&amp;nbsp;on multiplie la premi&amp;egrave;re ligne de&amp;nbsp;AA&amp;nbsp;et la seconde colonne de&amp;nbsp;BB&amp;nbsp;:&lt;/p&gt;\r\n\r\n&lt;p&gt;C=\\begin{pmatrix} \\color{red}{2} &amp;amp; \\color{red}{4} \\\\ 1 &amp;amp; 0\\end{pmatrix}\\times\\begin{pmatrix}-1 &amp;amp; \\color{red}{0} &amp;amp; 2 \\\\ -2 &amp;amp; \\color{red}{1} &amp;amp; 0\\end{pmatrix}C=(â€‹2â€‹1â€‹â€‹â€‹4â€‹0â€‹â€‹)&amp;times;(â€‹&amp;minus;1â€‹&amp;minus;2â€‹â€‹â€‹0â€‹1â€‹â€‹â€‹2â€‹0â€‹â€‹)&amp;nbsp;;&lt;/p&gt;\r\n\r\n&lt;p&gt;on a donc&amp;nbsp;c_{12}=2\\times 0+4\\times 1=0+4=4câ€‹12â€‹â€‹=2&amp;times;0+4&amp;times;1=0+4=4.&lt;/p&gt;\r\n\r\n&lt;p&gt;C=\\begin{pmatrix} \\color{red}{2} &amp;amp; \\color{red}{4} \\\\ 1 &amp;amp; 0\\end{pmatrix}\\times \\begin{pmatrix} -1 &amp;amp; \\color{red}{0} &amp;amp; 2 \\\\ -2 &amp;amp; \\color{red}{1} &amp;amp; 0\\end{pmatrix}=\\begin{pmatrix}-10 &amp;amp; \\color{red}{4} &amp;amp; \\cdots \\\\ \\cdots &amp;amp; \\cdots &amp;amp; \\cdots \\end{pmatrix}C=(â€‹2â€‹1â€‹â€‹â€‹4â€‹0â€‹â€‹)&amp;times;(â€‹&amp;minus;1â€‹&amp;minus;2â€‹â€‹â€‹0â€‹1â€‹â€‹â€‹2â€‹0â€‹â€‹)=(â€‹&amp;minus;10â€‹â‹¯â€‹â€‹â€‹4â€‹â‹¯â€‹â€‹â€‹â‹¯â€‹â‹¯â€‹â€‹).&lt;/p&gt;\r\n\r\n&lt;p&gt;Et ainsi de suite&amp;hellip;&lt;/p&gt;\r\n\r\n&lt;p&gt;Au final on trouve :&lt;/p&gt;\r\n\r\n&lt;p&gt;C=\\begin{pmatrix} 2 &amp;amp; 4 \\\\ 1 &amp;amp; 0\\end{pmatrix}\\times \\begin{pmatrix}-1 &amp;amp; 0 &amp;amp; 2 \\\\ -2 &amp;amp; 1 &amp;amp; 0\\end{pmatrix}=\\begin{pmatrix}-10 &amp;amp; 4 &amp;amp; 4 \\\\ -1 &amp;amp; 0 &amp;amp; 2 \\end{pmatrix}C=(â€‹2â€‹1â€‹â€‹â€‹4â€‹0â€‹â€‹)&amp;times;(â€‹&amp;minus;1â€‹&amp;minus;2â€‹â€‹â€‹0â€‹1â€‹â€‹â€‹2â€‹0â€‹â€‹)=(â€‹&amp;minus;10â€‹&amp;minus;1â€‹â€‹â€‹4â€‹0â€‹â€‹â€‹4â€‹2â€‹â€‹).&lt;/p&gt;\r\n\r\n&lt;p&gt;Dans ce qui suit, on s&amp;rsquo;int&amp;eacute;ressera principalement &amp;agrave; des matrices&amp;nbsp;&lt;strong&gt;carr&amp;eacute;es&lt;/strong&gt;.&lt;/p&gt;\r\n\r\n&lt;h3&gt;PROPRI&amp;Eacute;T&amp;Eacute;&lt;/h3&gt;\r\n\r\n&lt;p&gt;Soit&amp;nbsp;A, BA,B&amp;nbsp;et&amp;nbsp;CC, trois matrices carr&amp;eacute;es de m&amp;ecirc;me dimension.&lt;/p&gt;\r\n\r\n&lt;ul&gt;\r\n	&lt;li&gt;\r\n	&lt;p&gt;&amp;nbsp;A\\times \\left(B+C\\right) = A\\times B + A\\times CA&amp;times;(B+C)=A&amp;times;B+A&amp;times;C&amp;nbsp;(distributivit&amp;eacute; &amp;agrave; gauche)&lt;/p&gt;\r\n	&lt;/li&gt;\r\n	&lt;li&gt;\r\n	&lt;p&gt;&amp;nbsp;\\left(A+B\\right)\\times C = A\\times C + B\\times C(A+B)&amp;times;C=A&amp;times;C+B&amp;times;C&amp;nbsp;(distributivit&amp;eacute; &amp;agrave; droite)&lt;/p&gt;\r\n	&lt;/li&gt;\r\n	&lt;li&gt;\r\n	&lt;p&gt;&amp;nbsp;A\\times \\left(B\\times C\\right) = \\left(A\\times B\\right)\\times CA&amp;times;(B&amp;times;C)=(A&amp;times;B)&amp;times;C&amp;nbsp;(associativit&amp;eacute; de la multiplication)&lt;/p&gt;\r\n	&lt;/li&gt;\r\n&lt;/ul&gt;\r\n\r\n&lt;p&gt;Par contre en g&amp;eacute;n&amp;eacute;ral :&amp;nbsp;A\\times B\\neq B\\times AA&amp;times;B&amp;ne;B&amp;times;A&amp;nbsp;: la multiplication n&amp;rsquo;est&amp;nbsp;&lt;strong&gt;pas&lt;/strong&gt;&amp;nbsp;commutative.&lt;/p&gt;\r\n\r\n&lt;h3&gt;EXEMPLE&lt;/h3&gt;\r\n\r\n&lt;p&gt;Soit&amp;nbsp;A=\\begin{pmatrix} 0 &amp;amp; 2 \\\\ 0 &amp;amp; 0 \\end{pmatrix}A=(â€‹0â€‹0â€‹â€‹â€‹2â€‹0â€‹â€‹)&amp;nbsp;et&amp;nbsp;B=\\begin{pmatrix} 0 &amp;amp; 2 \\\\ 1 &amp;amp; 0 \\end{pmatrix}B=(â€‹0â€‹1â€‹â€‹â€‹2â€‹0â€‹â€‹)&lt;/p&gt;\r\n\r\n&lt;p&gt;A \\times B=\\begin{pmatrix} 2 &amp;amp; 0 \\\\ 0 &amp;amp; 0 \\end{pmatrix}A&amp;times;B=(â€‹2â€‹0â€‹â€‹â€‹0â€‹0â€‹â€‹)&lt;/p&gt;\r\n\r\n&lt;p&gt;tandis que :&lt;/p&gt;\r\n\r\n&lt;p&gt;B \\times A=\\begin{pmatrix} 0 &amp;amp; 0 \\\\ 0 &amp;amp; 2 \\end{pmatrix}B&amp;times;A=(â€‹0â€‹0â€‹â€‹â€‹0â€‹2â€‹â€‹)&lt;/p&gt;\r\n\r\n&lt;p&gt;Par cons&amp;eacute;quent&amp;nbsp;A\\times B \\neq B\\times AA&amp;times;B&amp;ne;B&amp;times;A.&lt;/p&gt;\r\n\r\n&lt;h3&gt;D&amp;Eacute;FINITION (PUISSANCE D&amp;rsquo;UNE MATRICE)&lt;/h3&gt;\r\n\r\n&lt;p&gt;Soit&amp;nbsp;AA&amp;nbsp;une matrice carr&amp;eacute;e et&amp;nbsp;nn&amp;nbsp;un entier naturel.&lt;/p&gt;\r\n\r\n&lt;p&gt;On note&amp;nbsp;A^{n}Aâ€‹nâ€‹â€‹&amp;nbsp;la matrice :&lt;/p&gt;\r\n\r\n&lt;p&gt;A^{n}=A\\times A\\times \\cdots.\\times AAâ€‹nâ€‹â€‹=A&amp;times;A&amp;times;â‹¯.&amp;times;A&amp;nbsp;(nn&amp;nbsp;facteurs).&lt;/p&gt;\r\n\r\n&lt;h3&gt;REMARQUE&lt;/h3&gt;\r\n\r\n&lt;p&gt;Par convention, on consid&amp;egrave;rera que&amp;nbsp;A^{0}Aâ€‹0â€‹â€‹&amp;nbsp;est la matrice unit&amp;eacute; de m&amp;ecirc;me taille que&amp;nbsp;AA.&lt;/p&gt;\r\n\r\n&lt;h3&gt;D&amp;Eacute;FINITION (MATRICE INVERSIBLE)&lt;/h3&gt;\r\n\r\n&lt;p&gt;Une matrice carr&amp;eacute;e A de dimension&amp;nbsp;nn&amp;nbsp;est&amp;nbsp;&lt;strong&gt;inversible&lt;/strong&gt;&amp;nbsp;si et seulement si il existe une&lt;/p&gt;\r\n\r\n&lt;p&gt;matrice&amp;nbsp;BB&amp;nbsp;telle que&lt;/p&gt;\r\n\r\n&lt;p&gt;A\\times B = B\\times A = I_{n}A&amp;times;B=B&amp;times;A=Iâ€‹nâ€‹â€‹&lt;/p&gt;\r\n\r\n&lt;p&gt;o&amp;ugrave;&amp;nbsp;I_{n}Iâ€‹nâ€‹â€‹&amp;nbsp;est la matrice unit&amp;eacute; de dimension&amp;nbsp;nn.&lt;/p&gt;\r\n\r\n&lt;p&gt;La matrice&amp;nbsp;BB&amp;nbsp;est appel&amp;eacute;e&amp;nbsp;&lt;strong&gt;matrice inverse&lt;/strong&gt;&amp;nbsp;de&amp;nbsp;AA&amp;nbsp;et not&amp;eacute;e&amp;nbsp;A^{-1}Aâ€‹&amp;minus;1â€‹â€‹.&lt;/p&gt;\r\n\r\n&lt;h2&gt;3. R&amp;Eacute;SOLUTION DE SYST&amp;Egrave;MES D&amp;rsquo;&amp;Eacute;QUATIONS&lt;/h2&gt;\r\n\r\n&lt;p&gt;Soit le syst&amp;egrave;me :&lt;/p&gt;\r\n\r\n&lt;p&gt;\\left(S\\right) \\left\\{ \\begin{matrix} ax+by=s \\\\ cx+dy=t \\end{matrix}\\right.(S){â€‹ax+by=sâ€‹cx+dy=tâ€‹â€‹&lt;/p&gt;\r\n\r\n&lt;p&gt;d&amp;rsquo;inconnues&amp;nbsp;xx&amp;nbsp;et&amp;nbsp;yy.&lt;/p&gt;\r\n\r\n&lt;p&gt;Si l&amp;rsquo;on pose&amp;nbsp;A=\\begin{pmatrix} a &amp;amp; b \\\\ c &amp;amp; d \\end{pmatrix}A=(â€‹aâ€‹câ€‹â€‹â€‹bâ€‹dâ€‹â€‹),&amp;nbsp;X=\\begin{pmatrix} x \\\\ y \\end{pmatrix}X=(â€‹xâ€‹yâ€‹â€‹)&amp;nbsp;et&amp;nbsp;B=\\begin{pmatrix} s \\\\ t \\end{pmatrix}B=(â€‹sâ€‹tâ€‹â€‹), le syst&amp;egrave;me&amp;nbsp;\\left(S\\right)(S)&amp;nbsp;peut s&amp;rsquo;&amp;eacute;crire :&lt;/p&gt;\r\n\r\n&lt;p&gt;A\\times X=BA&amp;times;X=B. Le th&amp;eacute;or&amp;egrave;me ci-dessous permet alors de r&amp;eacute;soudre ce syst&amp;egrave;me.&lt;/p&gt;\r\n\r\n&lt;h3&gt;TH&amp;Eacute;OR&amp;Egrave;ME&lt;/h3&gt;\r\n\r\n&lt;p&gt;Soit&amp;nbsp;AA&amp;nbsp;une matrice carr&amp;eacute;e.&lt;/p&gt;\r\n\r\n&lt;p&gt;Si&amp;nbsp;AA&amp;nbsp;est inversible, le syst&amp;egrave;me&amp;nbsp;A\\times X=BA&amp;times;X=B&amp;nbsp;admet une solution unique donn&amp;eacute;e par :&lt;/p&gt;\r\n\r\n&lt;p&gt;X=A^{-1}\\times BX=Aâ€‹&amp;minus;1â€‹â€‹&amp;times;B.&lt;/p&gt;\r\n\r\n&lt;h3&gt;EXEMPLE&lt;/h3&gt;\r\n\r\n&lt;p&gt;On cherche &amp;agrave; r&amp;eacute;soudre le syst&amp;egrave;me :&lt;/p&gt;\r\n\r\n&lt;p&gt;\\left(S\\right) \\left\\{ \\begin{matrix} 3x+4y=1 \\\\ 5x+7y=2 \\end{matrix}\\right.(S){â€‹3x+4y=1â€‹5x+7y=2â€‹â€‹&lt;/p&gt;\r\n\r\n&lt;p&gt;Pour cela on pose :&amp;nbsp;A=\\begin{pmatrix} 3 &amp;amp; 4 \\\\ 5 &amp;amp; 7 \\end{pmatrix}A=(â€‹3â€‹5â€‹â€‹â€‹4â€‹7â€‹â€‹),&amp;nbsp;X=\\begin{pmatrix} x \\\\ y \\end{pmatrix}X=(â€‹xâ€‹yâ€‹â€‹)&amp;nbsp;et&amp;nbsp;B=\\begin{pmatrix} 1 \\\\ 2 \\end{pmatrix}B=(â€‹1â€‹2â€‹â€‹).&lt;/p&gt;\r\n\r\n&lt;p&gt;L&amp;rsquo;&amp;eacute;criture matricielle est alors&amp;nbsp;A\\times X=BA&amp;times;X=B.&lt;/p&gt;\r\n\r\n&lt;p&gt;A la calculatrice, on trouve que&amp;nbsp;AA&amp;nbsp;est inversible d&amp;rsquo;inverse&amp;nbsp;A^{-1}=\\begin{pmatrix} 7 &amp;amp; -4 \\\\ -5 &amp;amp; 3 \\end{pmatrix}Aâ€‹&amp;minus;1â€‹â€‹=(â€‹7â€‹&amp;minus;5â€‹â€‹â€‹&amp;minus;4â€‹3â€‹â€‹).&lt;/p&gt;\r\n\r\n&lt;p&gt;La solution du syst&amp;egrave;me est donn&amp;eacute; par :&lt;/p&gt;\r\n\r\n&lt;p&gt;X=A^{-1}\\times B=\\begin{pmatrix} 7 &amp;amp; -4 \\\\ -5 &amp;amp; 3\\end{pmatrix}\\times \\begin{pmatrix}1 \\\\ 2\\end{pmatrix}=\\begin{pmatrix}-1 \\\\ 1 \\end{pmatrix}X=Aâ€‹&amp;minus;1â€‹â€‹&amp;times;B=(â€‹7â€‹&amp;minus;5â€‹â€‹â€‹&amp;minus;4â€‹3â€‹â€‹)&amp;times;(â€‹1â€‹2â€‹â€‹)=(â€‹&amp;minus;1â€‹1â€‹â€‹).&lt;/p&gt;\r\n\r\n&lt;p&gt;C&amp;rsquo;est &amp;agrave; dire&amp;nbsp;x=-1x=&amp;minus;1&amp;nbsp;et&amp;nbsp;y=1y=1.&lt;/p&gt;\r\n', 10, 1),
(2, 'Algorithmique', '&lt;p&gt;Vous venez d&amp;#39;apprendre les bases d&amp;#39;un langage de programmation ? Vous vous &amp;ecirc;tes peut-&amp;ecirc;tre rendu compte que parfois, en modifiant un peu votre programme, vous pouvez obtenir le m&amp;ecirc;me r&amp;eacute;sultat mais 2, 10 ou 1000 fois plus vite ?&lt;/p&gt;\r\n\r\n&lt;p&gt;De telles am&amp;eacute;liorations ne sont pas le fruit du hasard, ni m&amp;ecirc;me dues &amp;agrave; une augmentation de la m&amp;eacute;moire vive ou &amp;agrave; un changement de processeur : il y a plusieurs mani&amp;egrave;res de programmer quelque chose et certaines sont incroyablement meilleures que d&amp;#39;autres.&lt;/p&gt;\r\n\r\n&lt;p&gt;Avec un peu de r&amp;eacute;flexion, et des outils th&amp;eacute;oriques de base, vous serez vous aussi en mesure de faire de bons choix pour vos programmes. &amp;Agrave; la fin de ce tutoriel, vous serez de meilleurs d&amp;eacute;veloppeurs, en mesure de comprendre, corriger et concevoir des programmes plus efficaces.&lt;/p&gt;\r\n\r\n&lt;h2&gt;&lt;strong&gt;But du tutoriel&lt;/strong&gt;&lt;/h2&gt;\r\n\r\n&lt;p&gt;Les deux notions cl&amp;eacute;s de ce tutoriel sont les suivantes : la complexit&amp;eacute;, et les structures de donn&amp;eacute;es. La complexit&amp;eacute; est une mani&amp;egrave;re d&amp;#39;estimer les performances d&amp;#39;un algorithme. Les structures de donn&amp;eacute;es sont la mani&amp;egrave;re dont vous organisez les informations dans votre programme. En choisissant une structure de donn&amp;eacute;es adapt&amp;eacute;e, vous serez capables de coder des op&amp;eacute;rations tr&amp;egrave;s performantes (de faible complexit&amp;eacute;).&lt;/p&gt;\r\n\r\n&lt;p&gt;Chaque algorithme r&amp;eacute;sout un probl&amp;egrave;me donn&amp;eacute;. Pour chaque probl&amp;egrave;me, il existe un ou plusieurs algorithmes int&amp;eacute;ressants (mais on en d&amp;eacute;couvre de nouveaux tous les ans !). Nous vous pr&amp;eacute;senterons, dans ce tutoriel, un petit panorama de probl&amp;egrave;mes &amp;quot;courants&amp;quot;, dans le but de vous familiariser avec la complexit&amp;eacute; et les structures de donn&amp;eacute;es. Vous apprendrez par exemple &amp;agrave; chercher un &amp;eacute;l&amp;eacute;ment qui vous int&amp;eacute;resse &amp;agrave; l&amp;#39;int&amp;eacute;rieur d&amp;#39;un ensemble d&amp;#39;&amp;eacute;l&amp;eacute;ments, &amp;agrave; trier un ensemble, ou m&amp;ecirc;me &amp;agrave; trouver le plus court chemin d&amp;#39;un &amp;quot;endroit&amp;quot; &amp;agrave; un autre.&lt;/p&gt;\r\n\r\n&lt;h2&gt;&lt;strong&gt;Pr&amp;eacute;requis&lt;/strong&gt;&lt;/h2&gt;\r\n\r\n&lt;p&gt;Le but de ce tutoriel n&amp;#39;est&amp;nbsp;&lt;strong&gt;pas&lt;/strong&gt;&amp;nbsp;de vous apprendre &amp;agrave; programmer. Pour le lire, vous devez d&amp;eacute;j&amp;agrave; savoir programmer. L&amp;#39;apprentissage de l&amp;#39;algorithmique n&amp;#39;utilise pas de concepts bas niveau (assembleur, etc.) ou de biblioth&amp;egrave;ques logicielles sp&amp;eacute;cialis&amp;eacute;es (SDL, Qt...), mais vous devez &amp;ecirc;tre &amp;agrave; l&amp;#39;aise avec les variables, conditions, boucles et fonctions. La connaissance du concept de &amp;#39;r&amp;eacute;cursivit&amp;eacute;&amp;#39; (si vous vous sentez en manque, il y a d&amp;eacute;j&amp;agrave; un&amp;nbsp;&lt;a href=&quot;http://www.siteduzero.com/tutoriel-3-36703-la-recursivite.html&quot;&gt;tuto &amp;agrave; ce sujet&lt;/a&gt;&amp;nbsp;sur le SDZ) est aussi un avantage.&lt;/p&gt;\r\n\r\n&lt;p&gt;Le langage que vous utilisez n&amp;#39;est pas tr&amp;egrave;s important, car on tentera de formuler les algorithmes d&amp;#39;une mani&amp;egrave;re qui en est ind&amp;eacute;pendante. Nous donnerons aussi, pour les curieux, des exemples dans quelques langages de programmation. Si vous n&amp;#39;y voyez pas le v&amp;ocirc;tre, trouvez-en un suffisamment proche, et faites un petit effort.&amp;nbsp;&lt;img alt=&quot;:)&quot; src=&quot;https://openclassrooms.com/bundles/common/images/smiley/smile.png&quot; /&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;La complexit&amp;eacute; algorithmique est une mesure formelle de la complexit&amp;eacute; d&amp;#39;un algorithme. Elle s&amp;#39;exprime donc en langage math&amp;eacute;matique. Le calcul de certains algorithmes avanc&amp;eacute;s est tr&amp;egrave;s compliqu&amp;eacute; et demande des connaissances math&amp;eacute;matiques pouss&amp;eacute;es. Cependant, notre tutoriel se concentre sur des choses simples, et devrait &amp;ecirc;tre largement accessible : une connaissance des puissances et des racines (carr&amp;eacute;es) devrait suffire &amp;agrave; &amp;ecirc;tre &amp;agrave; l&amp;#39;aise. Un objet plus avanc&amp;eacute;, la fonction logarithme, sera pr&amp;eacute;sent&amp;eacute; et expliqu&amp;eacute; avant son utilisation.&lt;/p&gt;\r\n\r\n&lt;h2&gt;&lt;strong&gt;Historique&lt;/strong&gt;&lt;/h2&gt;\r\n\r\n&lt;p&gt;Ce tutoriel est en cours d&amp;#39;&amp;eacute;criture. Vous l&amp;#39;avez d&amp;eacute;j&amp;agrave; lu, et vous voulez savoir si quelque chose a &amp;eacute;t&amp;eacute; rajout&amp;eacute; ?&lt;br /&gt;\r\nVoici un historique des modifications, les plus r&amp;eacute;centes en premier :&lt;/p&gt;\r\n\r\n&lt;ul&gt;\r\n	&lt;li&gt;\r\n	&lt;p&gt;08 ao&amp;ucirc;t 2011 : correction d&amp;#39;une b&amp;eacute;vue rep&amp;eacute;r&amp;eacute;e par&amp;nbsp;&lt;a href=&quot;http://www.siteduzero.com/tutoriel-50-58341-p1-une-classe-d-algorithme-non-naifs-diviser-pour-regner.html#r60642&quot;&gt;Arnolddu51&lt;/a&gt;, et clarification par Cygal de la recherche de racine par dichotomie, suite &amp;agrave; une&amp;nbsp;&lt;a href=&quot;http://www.siteduzero.com/forum-83-676069-p1-multiplication-inexplicable.html&quot;&gt;question de bouboudu21&lt;/a&gt;&lt;/p&gt;\r\n	&lt;/li&gt;\r\n	&lt;li&gt;\r\n	&lt;p&gt;15 juin 2010 : r&amp;eacute;vision de l&amp;#39;impl&amp;eacute;mentation C du tri par fusion sur les listes&lt;/p&gt;\r\n	&lt;/li&gt;\r\n	&lt;li&gt;\r\n	&lt;p&gt;13 juin 2010 : diverses reformulations suite aux commentaires des lecteurs (candide, Equinoxe, programLyrique)&lt;/p&gt;\r\n	&lt;/li&gt;\r\n	&lt;li&gt;\r\n	&lt;p&gt;12 juin 2010 : impl&amp;eacute;mentation en C du tri par s&amp;eacute;lection sur les tableaux&lt;/p&gt;\r\n	&lt;/li&gt;\r\n	&lt;li&gt;\r\n	&lt;p&gt;juillet 2009 : correction de quelques typos, clarification de certains passages&lt;/p&gt;\r\n	&lt;/li&gt;\r\n	&lt;li&gt;\r\n	&lt;p&gt;26 avril 2009 : ajout d&amp;#39;exemples de code pour le chapitre sur les arbres&lt;/p&gt;\r\n	&lt;/li&gt;\r\n	&lt;li&gt;\r\n	&lt;p&gt;25 avril 2009 : ajout d&amp;#39;ic&amp;ocirc;nes pour les chapitres existants&lt;/p&gt;\r\n	&lt;/li&gt;\r\n	&lt;li&gt;\r\n	&lt;p&gt;22 avril 2009 (partie 3) ajout du deuxi&amp;egrave;me chapitre : arbres; les exemples de code sont &amp;agrave; venir&lt;/p&gt;\r\n	&lt;/li&gt;\r\n	&lt;li&gt;\r\n	&lt;p&gt;20 avril 2009 (partie 3) ajout d&amp;#39;un premier chapitre, assez simple, sur les piles et les files&lt;/p&gt;\r\n	&lt;/li&gt;\r\n	&lt;li&gt;\r\n	&lt;p&gt;27 f&amp;eacute;vrier 2009 (partie 1) reformulation et clarification de certains paragraphes&lt;/p&gt;\r\n	&lt;/li&gt;\r\n	&lt;li&gt;\r\n	&lt;p&gt;22 f&amp;eacute;vrier 2009 : ajout de l&amp;#39;historique, pr&amp;eacute;sentation d&amp;#39;un site d&amp;#39;exercices en fin de deuxi&amp;egrave;me partie&lt;/p&gt;\r\n	&lt;/li&gt;\r\n	&lt;li&gt;\r\n	&lt;p&gt;18 f&amp;eacute;vrier 2009 (partie 2) ajout d&amp;#39;exemples de code C pour les listes cha&amp;icirc;n&amp;eacute;es&lt;/p&gt;\r\n	&lt;/li&gt;\r\n	&lt;li&gt;\r\n	&lt;p&gt;11 f&amp;eacute;vrier 2009 (partie 2) chapitre &amp;quot;Introduction au probl&amp;egrave;me du tri&amp;quot;&lt;/p&gt;\r\n	&lt;/li&gt;\r\n	&lt;li&gt;\r\n	&lt;p&gt;janvier 2009 : zcorrection par&amp;nbsp;&lt;a href=&quot;http://www.siteduzero.com/membres-294-7500.html&quot;&gt;ptipilou&lt;/a&gt;&amp;nbsp;(r&amp;eacute;daction arr&amp;ecirc;t&amp;eacute;e &amp;agrave; cause d&amp;#39;un bug du SdZ)&lt;/p&gt;\r\n	&lt;/li&gt;\r\n	&lt;li&gt;\r\n	&lt;p&gt;mi octobre 2008 (partie 2) chapitre &amp;quot;Notions de structures de donn&amp;eacute;es : tableaux et listes cha&amp;icirc;n&amp;eacute;es&amp;quot;&lt;/p&gt;\r\n	&lt;/li&gt;\r\n	&lt;li&gt;\r\n	&lt;p&gt;d&amp;eacute;but septembre 2008 (partie 2) chapitre &amp;quot;Une classe d&amp;#39;algorithme non na&amp;iuml;fs : diviser pour r&amp;eacute;gner&amp;quot;, par lasts et Cygal&lt;/p&gt;\r\n	&lt;/li&gt;\r\n	&lt;li&gt;\r\n	&lt;p&gt;mi ao&amp;ucirc;t 2008 (partie 1) publication de la premi&amp;egrave;re partie&lt;/p&gt;\r\n	&lt;/li&gt;\r\n&lt;/ul&gt;\r\n', 8, 2),
(3, 'Les adverbes', '&lt;h1&gt;&lt;strong&gt;Adverbes les plus fr&amp;eacute;quents&lt;/strong&gt;&lt;/h1&gt;\r\n\r\n&lt;p&gt;&amp;nbsp;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;strong&gt;&lt;strong&gt;Ils peuvent &amp;ecirc;tre regroup&amp;eacute;s selon leur sens : lieu, temps, fr&amp;eacute;quence, degr&amp;eacute;, ajout, liaison, mani&amp;egrave;re etc.&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;strong&gt;&lt;strong&gt;Voici un r&amp;eacute;capitulatif des adverbes les plus fr&amp;eacute;quemment utilis&amp;eacute;s :&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;strong&gt;Adverbes de lieu :&lt;/strong&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;strong&gt;- Above : Plus haut&lt;/strong&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;strong&gt;- Behind : Derri&amp;egrave;re&lt;/strong&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;strong&gt;- Here : Ici&lt;/strong&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;strong&gt;- There : L&amp;agrave;/L&amp;agrave;-bas&lt;/strong&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;strong&gt;- Upstairs : En haut&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;strong&gt;&lt;strong&gt;&lt;em&gt;Adverbe de temps :&lt;/em&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;strong&gt;- Afterwards : Apr&amp;egrave;s/par la suite&lt;/strong&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;strong&gt;- Already : D&amp;eacute;j&amp;agrave;&lt;/strong&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;strong&gt;- Eventually : Finalement/En fin de compte&lt;/strong&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;strong&gt;- Now : Maintenant&lt;/strong&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;strong&gt;- Once : Autrefois&lt;/strong&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;strong&gt;- Soon : Bient&amp;ocirc;t&lt;/strong&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;strong&gt;- Still : Encore&lt;/strong&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;strong&gt;- Weekly&amp;nbsp;: Chaque semaine&lt;/strong&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;strong&gt;- Today :&amp;nbsp;Aujourd&amp;#39;hui&lt;/strong&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;strong&gt;Adverbes de fr&amp;eacute;quence :&lt;/strong&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;strong&gt;- Always : Toujours&lt;/strong&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;strong&gt;- Never : Ne... jamais&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;strong&gt;- Now and then : De temps &amp;agrave; autre&lt;/strong&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;strong&gt;- Occasionally :De temps en temps&lt;/strong&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;strong&gt;- Rarely/Seldom : Rarement&lt;/strong&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;strong&gt;- Usually : D&amp;#39;habitude&lt;/strong&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;strong&gt;- Often : Souvent&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;strong&gt;&lt;strong&gt;&lt;em&gt;Adverbes d&amp;#39;ajout :&lt;/em&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;strong&gt;- Also (en d&amp;eacute;but de phrase) : En outre&lt;/strong&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;strong&gt;- Also, too : Aussi&lt;/strong&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;strong&gt;- As well : Egalement&lt;/strong&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;strong&gt;- Else : Autre (What else ? Quoi d&amp;#39;autre)&lt;/strong&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;strong&gt;- In addition : De plus&lt;/strong&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;strong&gt;&lt;strong&gt;&lt;em&gt;Adverbes de degr&amp;eacute; :&lt;/em&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;strong&gt;- A little/A bit/Slightly : Un peu&lt;/strong&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;strong&gt;- Almost/Nearly : Presque&lt;/strong&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;strong&gt;- Enough : Assez&lt;/strong&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;strong&gt;- Even : M&amp;ecirc;me&lt;/strong&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;strong&gt;- Fairly : Relativement&lt;/strong&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;strong&gt;- Hardly/Scarcely : &amp;Agrave; peine&lt;/strong&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;strong&gt;- Somewhat : Quelque peu&lt;/strong&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;strong&gt;- Too : Trop&lt;/strong&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;strong&gt;- Utterly : Compl&amp;egrave;tement&lt;/strong&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;strong&gt;Adverbes de liaison :&lt;/strong&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;strong&gt;- Actually : En fait&lt;/strong&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;strong&gt;- And then : Ensuite&lt;/strong&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;strong&gt;- Anyway : De toute fa&amp;ccedil;on&lt;/strong&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;strong&gt;- Besides : D&amp;#39;ailleurs&lt;br /&gt;\r\n&lt;br /&gt;\r\n-&amp;nbsp;Firstly, Secondly : Premi&amp;egrave;rement, Deuxi&amp;egrave;mement&lt;/strong&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;strong&gt;- Furthermore / Moreover : De plus, en outre&lt;/strong&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;strong&gt;- Somehow : Pour une raison ou pour une autre&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;strong&gt;- Therefore : Par cons&amp;eacute;quent&lt;/strong&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;strong&gt;- Thus : Ainsi/Donc&lt;/strong&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;strong&gt;&lt;strong&gt;&lt;em&gt;Adverbes de liaison exprimant un contraste :&lt;/em&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;strong&gt;- All the same : Quand m&amp;ecirc;me&lt;/strong&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;strong&gt;- However : Cependant&lt;/strong&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;strong&gt;- Nevertheless : N&amp;eacute;anmoins&lt;/strong&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;strong&gt;- Otherwise : Sinon&lt;/strong&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;strong&gt;- Though (en fin de phrase) : Pourtant (It&amp;#39;s not difficult though. Ce n&amp;#39;est pas difficile pourtant)&lt;/strong&gt;&lt;/p&gt;\r\n', 7, 3);
INSERT INTO `course` (`id`, `title`, `content`, `teacher`, `chapter`) VALUES
(4, 'L''Europe', '&lt;p&gt;Peu apr&amp;egrave;s la Seconde Guerre mondiale, au d&amp;eacute;but des ann&amp;eacute;es 1950, na&amp;icirc;t l&amp;rsquo;id&amp;eacute;e d&amp;rsquo;une&amp;nbsp;&lt;strong&gt;union entre les peuples europ&amp;eacute;ens&lt;/strong&gt;&amp;nbsp;qui garantirait la paix et la prosp&amp;eacute;rit&amp;eacute; sur le continent. Depuis, cette coop&amp;eacute;ration n&amp;rsquo;a cess&amp;eacute; de s&amp;rsquo;&amp;eacute;largir, renforc&amp;eacute;e par de nombreux&amp;nbsp;&lt;strong&gt;trait&amp;eacute;s&lt;/strong&gt;.&lt;br /&gt;\r\nEn 2012, l&amp;#39;Union europ&amp;eacute;enne compte 27 membres, concentre 20 % de la richesse mondiale et la plus grande part d&amp;rsquo;&amp;eacute;changes commerciaux au monde pour seulement 7 % de la population mondiale.&lt;/p&gt;\r\n\r\n&lt;p&gt;1.&amp;nbsp;Une association d&amp;rsquo;&amp;Eacute;tats&lt;/p&gt;\r\n\r\n&lt;p&gt;a.&amp;nbsp;Les &amp;eacute;tapes de la construction&lt;/p&gt;\r\n\r\n&lt;p&gt;Ruin&amp;eacute;s par la Seconde Guerre mondiale, la&amp;nbsp;&lt;strong&gt;France&lt;/strong&gt;&amp;nbsp;et l&amp;rsquo;&lt;strong&gt;Allemagne&lt;/strong&gt;&amp;nbsp;d&amp;eacute;cident de s&amp;rsquo;unir autour d&amp;rsquo;int&amp;eacute;r&amp;ecirc;ts &amp;eacute;conomiques communs et organisent, en&amp;nbsp;&lt;strong&gt;1951&lt;/strong&gt;, avec la Belgique, les Pays-Bas, le Luxembourg et l&amp;rsquo;Italie, un&amp;nbsp;&lt;strong&gt;march&amp;eacute; commun du charbon et de l&amp;rsquo;acier&lt;/strong&gt;&amp;nbsp;(&lt;strong&gt;CECA&lt;/strong&gt;). Cet acte fondateur est suivi de nouvelles n&amp;eacute;gociations et de la signature du&amp;nbsp;&lt;strong&gt;trait&amp;eacute; de Rome&lt;/strong&gt;&amp;nbsp;en&amp;nbsp;&lt;strong&gt;1957&lt;/strong&gt;, instituant la&amp;nbsp;&lt;strong&gt;Communaut&amp;eacute; &amp;eacute;conomique europ&amp;eacute;enne&lt;/strong&gt;&amp;nbsp;(&lt;strong&gt;CEE&lt;/strong&gt;).&lt;br /&gt;\r\n&lt;br /&gt;\r\nAfin de renforcer la coop&amp;eacute;ration entre ces pays, l&amp;rsquo;id&amp;eacute;e d&amp;rsquo;une Europe politique fait son chemin et voit le jour avec la signature du&amp;nbsp;&lt;strong&gt;trait&amp;eacute; de Maastricht&lt;/strong&gt;, en&amp;nbsp;&lt;strong&gt;1992&lt;/strong&gt;, qui met fin &amp;agrave; la CEE et donne naissance &amp;agrave; l&amp;rsquo;Union europ&amp;eacute;enne en d&amp;eacute;cidant de son fonctionnement institutionnel. Le&amp;nbsp;&lt;strong&gt;trait&amp;eacute; de Lisbonne&lt;/strong&gt;&amp;nbsp;de&amp;nbsp;&lt;strong&gt;2007&lt;/strong&gt;&amp;nbsp;renforce encore ces aspects en instaurant par exemple le principe de la&amp;nbsp;&lt;strong&gt;majorit&amp;eacute; qualifi&amp;eacute;e&lt;/strong&gt;&amp;nbsp;(pour &amp;ecirc;tre adopt&amp;eacute;, un texte doit &amp;ecirc;tre approuv&amp;eacute; par au moins 55 % des &amp;Eacute;tats comprenant au moins 65 % de la population de l&amp;rsquo;UE) et la&amp;nbsp;&lt;strong&gt;fonction de pr&amp;eacute;sident de l&amp;rsquo;UE&lt;/strong&gt;.&lt;/p&gt;\r\n\r\n&lt;p&gt;b.&amp;nbsp;Une construction originale&lt;/p&gt;\r\n\r\n&lt;p&gt;La construction de l&amp;rsquo;Union europ&amp;eacute;enne s&amp;#39;est effectu&amp;eacute;e en alternant des phases d&amp;rsquo;&amp;eacute;largissement (vagues d&amp;rsquo;adh&amp;eacute;sions) et des p&amp;eacute;riodes d&amp;rsquo;approfondissement (mise en commun d&amp;rsquo;un nombre croissant d&amp;rsquo;institutions). En&amp;nbsp;&lt;strong&gt;2012&lt;/strong&gt;, l&amp;#39;UE compte&amp;nbsp;&lt;strong&gt;27&lt;/strong&gt;&amp;nbsp;membres et correspond &amp;agrave; un espace vaste de plus de 4,3 millions de km2. Elle constitue un march&amp;eacute; de consommateurs de plus de&amp;nbsp;&lt;strong&gt;500&amp;nbsp;millions d&amp;rsquo;habitants&lt;/strong&gt;&amp;nbsp;qui s&amp;rsquo;est tourn&amp;eacute; vers ses fronti&amp;egrave;res orientales, en s&amp;rsquo;&amp;eacute;tirant du Portugal jusqu&amp;#39;aux fronti&amp;egrave;res de la Russie.&lt;br /&gt;\r\n&amp;nbsp;&lt;/p&gt;\r\n\r\n&lt;table align=&quot;center&quot; border=&quot;0&quot; cellpadding=&quot;1&quot; cellspacing=&quot;1&quot; style=&quot;height:472px; width:508px&quot;&gt;\r\n	&lt;tbody&gt;\r\n		&lt;tr&gt;\r\n			&lt;td&gt;&lt;img alt=&quot;&quot; src=&quot;http://e.maxicours.com/img/3/9/0/2/390279.jpg&quot; style=&quot;height:463px; width:500px&quot; /&gt;&lt;/td&gt;\r\n		&lt;/tr&gt;\r\n		&lt;tr&gt;\r\n			&lt;td&gt;&lt;strong&gt;Doc. 1.&lt;/strong&gt;&amp;nbsp;L&amp;#39;Europe des 27&lt;/td&gt;\r\n		&lt;/tr&gt;\r\n	&lt;/tbody&gt;\r\n&lt;/table&gt;\r\n\r\n&lt;p&gt;&lt;br /&gt;\r\nLes extensions pass&amp;eacute;es ou les extensions &amp;agrave; venir posent n&amp;eacute;anmoins la question plus large de la&amp;nbsp;&lt;strong&gt;supranationalit&amp;eacute;&lt;/strong&gt;&amp;nbsp;et des limites de l&amp;rsquo;Europe institu&amp;eacute;e : faut-il consid&amp;eacute;rer l&amp;rsquo;espace europ&amp;eacute;en en termes g&amp;eacute;ographiques et historiques, ou faut-il plut&amp;ocirc;t se fonder sur la seule volont&amp;eacute; des peuples &amp;agrave; vivre ensemble ? Ces questions, encore au c&amp;oelig;ur des r&amp;eacute;flexions, trouvent davantage d&amp;rsquo;&amp;eacute;cho depuis la&amp;nbsp;&lt;strong&gt;crise &amp;eacute;conomique et financi&amp;egrave;re&lt;/strong&gt;&amp;nbsp;de&amp;nbsp;&lt;strong&gt;2009&lt;/strong&gt;&amp;nbsp;qui menace l&amp;rsquo;&amp;eacute;quilibre de l&amp;rsquo;UE.&lt;/p&gt;\r\n\r\n&lt;p&gt;2.&amp;nbsp;Des politiques communes&lt;/p&gt;\r\n\r\n&lt;p&gt;a.&amp;nbsp;La zone euro et l&amp;rsquo;espace Schengen&lt;/p&gt;\r\n\r\n&lt;p&gt;Originellement politique et &amp;eacute;conomique, le&amp;nbsp;&lt;strong&gt;projet europ&amp;eacute;en&lt;/strong&gt;&amp;nbsp;est en effet &amp;eacute;galement devenu&amp;nbsp;&lt;strong&gt;financier&lt;/strong&gt;&amp;nbsp;&lt;strong&gt;et social&lt;/strong&gt;, tant l&amp;rsquo;action de l&amp;rsquo;UE concerne des domaines vari&amp;eacute;s, depuis la&amp;nbsp;&lt;strong&gt;politique agricole commune&lt;/strong&gt;&amp;nbsp;(&lt;strong&gt;PAC&lt;/strong&gt;) qui finance les exploitants agricoles ou le&amp;nbsp;&lt;strong&gt;programme Erasmus&lt;/strong&gt;&amp;nbsp;qui favorise les &amp;eacute;changes universitaires &amp;agrave; l&amp;rsquo;&amp;eacute;chelle de l&amp;rsquo;UE.&lt;br /&gt;\r\n&lt;br /&gt;\r\nBien plus, la constitution d&amp;rsquo;une&amp;nbsp;&lt;strong&gt;zone euro&lt;/strong&gt;, &amp;agrave; l&amp;rsquo;int&amp;eacute;rieur de laquelle une&amp;nbsp;&lt;strong&gt;monnaie unique&lt;/strong&gt;&amp;nbsp;a &amp;eacute;t&amp;eacute; mise en circulation en&amp;nbsp;&lt;strong&gt;2002&lt;/strong&gt;, et d&amp;rsquo;un espace de libre circulation des hommes et des marchandises dans le cadre de l&amp;rsquo;&lt;strong&gt;espace Schengen&lt;/strong&gt;&amp;nbsp;font de l&amp;rsquo;UE un espace de&amp;nbsp;&lt;strong&gt;coop&amp;eacute;ration&lt;/strong&gt;&amp;nbsp;complet et comp&amp;eacute;titif &amp;agrave; l&amp;rsquo;&amp;eacute;chelle mondiale. Il favorise la croissance de ses pays membres et de son march&amp;eacute; int&amp;eacute;rieur tout en reconnaissant l&amp;rsquo;&lt;strong&gt;identit&amp;eacute;&lt;/strong&gt;&amp;nbsp;et la&amp;nbsp;&lt;strong&gt;souverainet&amp;eacute;&lt;/strong&gt;&amp;nbsp;de chaque pays membre.&lt;br /&gt;\r\n&amp;nbsp;&lt;/p&gt;\r\n\r\n&lt;table align=&quot;center&quot; border=&quot;0&quot; cellpadding=&quot;1&quot; cellspacing=&quot;1&quot; style=&quot;width:350px&quot;&gt;\r\n	&lt;tbody&gt;\r\n		&lt;tr&gt;\r\n			&lt;td&gt;&lt;img alt=&quot;&quot; src=&quot;http://e.maxicours.com/img/2/3/3/6/233639.jpg&quot; style=&quot;height:167px; width:250px&quot; /&gt;&lt;/td&gt;\r\n		&lt;/tr&gt;\r\n		&lt;tr&gt;\r\n			&lt;td&gt;&lt;strong&gt;Doc. 2.&lt;/strong&gt;&amp;nbsp;Le drapeau europ&amp;eacute;en&lt;/td&gt;\r\n		&lt;/tr&gt;\r\n	&lt;/tbody&gt;\r\n&lt;/table&gt;\r\n\r\n&lt;p&gt;b.&amp;nbsp;Des institutions communes&lt;/p&gt;\r\n\r\n&lt;p&gt;Ces actions sont men&amp;eacute;es de concert au sein de&amp;nbsp;&lt;strong&gt;trois institutions principales&lt;/strong&gt;&amp;nbsp;qui servent de colonne vert&amp;eacute;brale &amp;agrave; l&amp;rsquo;UE et auxquelles participent tous les pays membres :&lt;br /&gt;\r\n&lt;br /&gt;\r\n- La&amp;nbsp;&lt;strong&gt;Commission europ&amp;eacute;enne&lt;/strong&gt;&amp;nbsp;(1 commissaire par &amp;Eacute;tat membre), situ&amp;eacute;e &amp;agrave;&amp;nbsp;&lt;strong&gt;Bruxelles&lt;/strong&gt;, propose et met en &amp;oelig;uvre les politiques communautaires ; c&amp;rsquo;est la gardienne des trait&amp;eacute;s europ&amp;eacute;ens.&lt;br /&gt;\r\n- Le&amp;nbsp;&lt;strong&gt;Parlement europ&amp;eacute;en&lt;/strong&gt;, qui si&amp;egrave;ge &amp;agrave;&amp;nbsp;&lt;strong&gt;Strasbourg et Bruxelles&lt;/strong&gt;, est une instance l&amp;eacute;gislative constitu&amp;eacute;e d&amp;rsquo;environ 750 d&amp;eacute;put&amp;eacute;s repr&amp;eacute;sentant les 375 millions d&amp;rsquo;&amp;eacute;lecteurs provenant des 27&amp;nbsp;&amp;Eacute;tats. S&amp;rsquo;il n&amp;rsquo;est pas &amp;agrave; l&amp;rsquo;initiative des lois, il participe &amp;agrave; l&amp;rsquo;&amp;eacute;laboration des directives et des r&amp;egrave;glements, ainsi qu&amp;rsquo;au vote du budget.&lt;br /&gt;\r\n- Enfin, la&amp;nbsp;&lt;strong&gt;Cour de Justice&lt;/strong&gt;&amp;nbsp;de l&amp;rsquo;UE si&amp;egrave;ge &amp;agrave;&amp;nbsp;&lt;strong&gt;Luxembourg&lt;/strong&gt;&amp;nbsp;et veille &amp;agrave; la bonne application du droit de l&amp;rsquo;Union.&lt;/p&gt;\r\n\r\n&lt;p&gt;3.&amp;nbsp;L&amp;rsquo;Union europ&amp;eacute;enne dans le contexte mondial&lt;/p&gt;\r\n\r\n&lt;p&gt;a.&amp;nbsp;Un espace d&amp;eacute;mocratique riche et d&amp;eacute;velopp&amp;eacute;&lt;/p&gt;\r\n\r\n&lt;p&gt;L&amp;rsquo;Union europ&amp;eacute;enne rassemble des pays disposant d&amp;rsquo;un&amp;nbsp;&lt;strong&gt;haut niveau de richesse&lt;/strong&gt;&amp;nbsp;(25 000 &amp;euro; par habitant) et au PIB &amp;eacute;lev&amp;eacute;. C&amp;rsquo;est &amp;eacute;galement un espace de paix constitu&amp;eacute; de&amp;nbsp;&lt;strong&gt;pays d&amp;eacute;mocratiques&lt;/strong&gt;, respectueux des droits de l&amp;rsquo;Homme.&lt;br /&gt;\r\n&amp;Agrave; l&amp;rsquo;appui des mesures protectionnistes de l&amp;rsquo;UE (comme la Politique Agricole Commune, dite&amp;nbsp;&lt;strong&gt;PAC&lt;/strong&gt;), toutes les conditions sont r&amp;eacute;unies pour favoriser les &amp;eacute;changes intra-communautaires et constituer ainsi le&amp;nbsp;&lt;strong&gt;premier p&amp;ocirc;le d&amp;rsquo;&amp;eacute;changes commerciaux au monde&lt;/strong&gt;, devant l&amp;rsquo;Asie et l&amp;rsquo;Am&amp;eacute;rique du Nord. C&amp;rsquo;est &amp;eacute;galement le principal p&amp;ocirc;le r&amp;eacute;cepteur d&amp;rsquo;&lt;strong&gt;IDE&lt;/strong&gt;(&lt;strong&gt;investissements directs &amp;agrave; l&amp;rsquo;&amp;eacute;tranger&lt;/strong&gt;), c&amp;rsquo;est-&amp;agrave;-dire les sommes investies par des entreprises ou des &amp;Eacute;tats &amp;eacute;trangers dans les industries communautaires.&lt;/p&gt;\r\n\r\n&lt;p&gt;b.&amp;nbsp;Un projet qui interroge&lt;/p&gt;\r\n\r\n&lt;p&gt;L&amp;rsquo;Union europ&amp;eacute;enne&amp;nbsp;&lt;strong&gt;manque n&amp;eacute;anmoins d&amp;rsquo;unit&amp;eacute;&lt;/strong&gt;. Tous les pays membres ne participent pas de la m&amp;ecirc;me mani&amp;egrave;re aux politiques communes au point qu&amp;rsquo;en&amp;nbsp;&lt;strong&gt;2012&lt;/strong&gt;, l&amp;rsquo;UE ne co&amp;iuml;ncide exactement ni avec la zone euro (l&amp;rsquo;Angleterre par exemple n&amp;rsquo;en fait pas partie) ni avec l&amp;rsquo;espace Schengen.&lt;br /&gt;\r\n&amp;nbsp;&lt;/p&gt;\r\n\r\n&lt;table align=&quot;center&quot; border=&quot;0&quot; cellpadding=&quot;1&quot; cellspacing=&quot;1&quot; style=&quot;width:350px&quot;&gt;\r\n	&lt;tbody&gt;\r\n		&lt;tr&gt;\r\n			&lt;td&gt;&lt;img alt=&quot;&quot; src=&quot;http://e.maxicours.com/img/2/0/3/7/203753.gif&quot; style=&quot;height:385px; width:500px&quot; /&gt;&lt;/td&gt;\r\n		&lt;/tr&gt;\r\n		&lt;tr&gt;\r\n			&lt;td&gt;&lt;strong&gt;Doc. 3.&lt;/strong&gt;&amp;nbsp;La zone euro et l&amp;#39;Union europ&amp;eacute;enne&lt;/td&gt;\r\n		&lt;/tr&gt;\r\n	&lt;/tbody&gt;\r\n&lt;/table&gt;\r\n\r\n&lt;p&gt;&lt;br /&gt;\r\nDe plus, tous les Europ&amp;eacute;ens ne se reconnaissent pas enti&amp;egrave;rement dans les &amp;eacute;volutions de l&amp;rsquo;UE et les forts taux d&amp;rsquo;abstention aux &amp;eacute;lections europ&amp;eacute;ennes peuvent en partie s&amp;rsquo;expliquer par cet&amp;nbsp;&lt;strong&gt;euroscepticisme&lt;/strong&gt;.&lt;br /&gt;\r\n&lt;br /&gt;\r\nEnfin, l&amp;rsquo;insertion de cet espace original dans l&amp;rsquo;espace mondialis&amp;eacute; provoque aujourd&amp;rsquo;hui de&amp;nbsp;&lt;strong&gt;nouveaux d&amp;eacute;fis&lt;/strong&gt;, comme l&amp;rsquo;&lt;strong&gt;importante crise financi&amp;egrave;re&lt;/strong&gt;&amp;nbsp;li&amp;eacute;e &amp;agrave; la dette de certains &amp;Eacute;tats membres, crise qui menace aujourd&amp;rsquo;hui l&amp;rsquo;unit&amp;eacute; et l&amp;rsquo;&amp;eacute;quilibre de l&amp;rsquo;UE.&lt;/p&gt;\r\n', 7, 4);
INSERT INTO `course` (`id`, `title`, `content`, `teacher`, `chapter`) VALUES
(5, 'Les tris', '&lt;p&gt;Comme on l&amp;#39;a vu, il est facile de rechercher un &amp;eacute;l&amp;eacute;ment particulier dans un ensemble tri&amp;eacute;, par exemple un dictionnaire. Mais dans la &amp;quot;vraie vie&amp;quot;, ou plut&amp;ocirc;t dans la vie d&amp;#39;un programmeur, les informations ne sont pas souvent tri&amp;eacute;es. Il se produit m&amp;ecirc;me un ph&amp;eacute;nom&amp;egrave;ne assez aga&amp;ccedil;ant et tr&amp;egrave;s g&amp;eacute;n&amp;eacute;ral : quand on laisse quelque chose changer, &amp;ccedil;a devient vite le bazar (exemple : votre chambre). Des scientifiques tr&amp;egrave;s intelligents ont pass&amp;eacute; beaucoup de temps &amp;agrave; &amp;eacute;tudier ce principe.&lt;/p&gt;\r\n\r\n&lt;p&gt;Il y a plusieurs approches pour se prot&amp;eacute;ger de ce danger. La premi&amp;egrave;re est de faire tr&amp;egrave;s attention, tout le temps, &amp;agrave; ce que les choses soient bien rang&amp;eacute;es. C&amp;#39;est ce que fait par exemple un biblioth&amp;eacute;caire : quand on lui rend un livre, il va le poser sur le bon rayon, au bon endroit, et s&amp;#39;il fait bien cela &amp;agrave; chaque fois il est facile de trouver le livre qu&amp;#39;on cherche dans une biblioth&amp;egrave;que. C&amp;#39;est aussi ce que certains font avec leur chambre, ils passent leur temps &amp;agrave; r&amp;eacute;ordonner leurs livres, leurs cahiers, etc. D&amp;#39;autres pr&amp;eacute;f&amp;egrave;rent une m&amp;eacute;thode plus radicale : toutes les semaines, ou tous les mois, ou tous les dix ans, ils font un grand m&amp;eacute;nage.&lt;/p&gt;\r\n\r\n&lt;p&gt;Pour l&amp;#39;instant, nous allons nous int&amp;eacute;resser au grand m&amp;eacute;nage : quand on a un ensemble de donn&amp;eacute;es dans un ordre quelconque, comment r&amp;eacute;cup&amp;eacute;rer les m&amp;ecirc;mes donn&amp;eacute;es dans l&amp;#39;ordre ? C&amp;#39;est le probl&amp;egrave;me du&amp;nbsp;&lt;em&gt;tri&lt;/em&gt;, et il a de multiples solutions. Curieusement, les m&amp;eacute;thodes utilis&amp;eacute;es par l&amp;#39;ordinateur sont parfois tr&amp;egrave;s diff&amp;eacute;rentes de celles qu&amp;#39;utilisent les humains ; il y a plusieurs raisons, par exemple le fait qu&amp;#39;ils trient souvent beaucoup plus de choses (vous imaginez une chambre avec 5 millions de chaussettes sales ?) mais surtout qu&amp;#39;ils ne font presque jamais d&amp;#39;erreurs et ne s&amp;#39;ennuient jamais.&lt;/p&gt;\r\n\r\n&lt;h2&gt;Formuler le probl&amp;egrave;me du tri&lt;/h2&gt;\r\n\r\n&lt;p&gt;Pour &amp;eacute;crire un algorithme, il faut se mettre bien d&amp;#39;accord sur le probl&amp;egrave;me qu&amp;#39;il r&amp;eacute;sout.&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;strong&gt;Probl&amp;egrave;me du tri :&lt;/strong&gt;&amp;nbsp;On poss&amp;egrave;de une collection d&amp;#39;&amp;eacute;l&amp;eacute;ments, que l&amp;#39;on sait comparer entre eux. On veut obtenir ces &amp;eacute;l&amp;eacute;ments&amp;nbsp;&lt;em&gt;dans l&amp;#39;ordre&lt;/em&gt;, c&amp;#39;est-&amp;agrave;-dire une collection contenant exactement les m&amp;ecirc;mes &amp;eacute;l&amp;eacute;ments, mais dans laquelle un &amp;eacute;l&amp;eacute;ment est toujours &amp;quot;plus petit&amp;quot; que tous les &amp;eacute;l&amp;eacute;ments suivants.&lt;/p&gt;\r\n\r\n&lt;p&gt;Vous noterez qu&amp;#39;on n&amp;#39;a pas besoin de pr&amp;eacute;ciser quel est le type des &amp;eacute;l&amp;eacute;ments : on peut vouloir trier des entiers, des mots ou des chaussettes. On n&amp;#39;a pas non plus pr&amp;eacute;cis&amp;eacute; de m&amp;eacute;thode de comparaison particuli&amp;egrave;re : si on veut trier une liste de personnes, on peut la trier par nom, par adresse ou par num&amp;eacute;ro de t&amp;eacute;l&amp;eacute;phone. M&amp;ecirc;me pour des entiers, on peut vouloir les trier par ordre croissant ou par ordre d&amp;eacute;croissant, c&amp;#39;est-&amp;agrave;-dire en les comparant de diff&amp;eacute;rentes mani&amp;egrave;res. Le tout est de convenir ce que veut dire &amp;quot;plus petit&amp;quot; pour ce que l&amp;#39;on veut trier (paradoxalement, si l&amp;#39;on veut trier des entiers en ordre d&amp;eacute;croissant, on dira que 5 est &amp;quot;plus petit&amp;quot; que 3, puisqu&amp;#39;on le veut avant dans la liste tri&amp;eacute;e).&lt;/p&gt;\r\n\r\n&lt;p&gt;Dans la plupart des cas, on triera des entiers par ordre croissant. C&amp;#39;est le cas le plus simple, et les tris expos&amp;eacute;s ici seront tous g&amp;eacute;n&amp;eacute;ralisables aux autres situations.&lt;/p&gt;\r\n\r\n&lt;p&gt;Question de la structure de donn&amp;eacute;e&lt;/p&gt;\r\n\r\n&lt;p&gt;Comment sont concr&amp;egrave;tement stock&amp;eacute;es nos donn&amp;eacute;es ? Nous avons d&amp;eacute;j&amp;agrave; vu deux structures tr&amp;egrave;s importantes, les listes et les tableaux. En pratique, vous avez soit une liste soit un tableau sous la main, et vous voulez le trier, vous vous demandez donc &amp;quot;comment trier ma liste&amp;quot; ou &amp;quot;comment trier mon tableau ?&amp;quot;.&lt;/p&gt;\r\n\r\n&lt;p&gt;Il se trouve que les algorithmes pour trier des listes et des tableaux sont assez proches (ils reposent fondamentalement sur les m&amp;ecirc;mes id&amp;eacute;es). En g&amp;eacute;n&amp;eacute;ral, ce sont les petits d&amp;eacute;tails qui changent. Cependant, il y a tout de m&amp;ecirc;me des algorithmes qui utilisent une op&amp;eacute;ration privil&amp;eacute;gi&amp;eacute;e d&amp;#39;une des deux structures et ne sont pas adapt&amp;eacute;s pour l&amp;#39;autre.&lt;/p&gt;\r\n\r\n&lt;p&gt;Nous allons proc&amp;eacute;der ainsi : nous commencerons par d&amp;eacute;crire l&amp;#39;algorithme de tri de mani&amp;egrave;re assez abstraite, en prenant beaucoup de distance, et ensuite nous nous demanderons si l&amp;#39;algorithme est adapt&amp;eacute; pour chaque structure, et si oui comment l&amp;#39;impl&amp;eacute;menter. Cela permet &amp;agrave; la fois d&amp;#39;avoir une approche g&amp;eacute;n&amp;eacute;raliste qui fait ressortir les id&amp;eacute;es essentielles de chaque tri, et de discuter &amp;agrave; nouveau des probl&amp;eacute;matiques du choix de la structure de donn&amp;eacute;e.&lt;/p&gt;\r\n\r\n&lt;h2&gt;Tri par s&amp;eacute;lection&lt;/h2&gt;\r\n\r\n&lt;p&gt;Le tri par s&amp;eacute;lection est sans doute le tri le plus simple &amp;agrave; imaginer.&lt;/p&gt;\r\n\r\n&lt;p&gt;On a une suite d&amp;#39;&amp;eacute;l&amp;eacute;ments dans le d&amp;eacute;sordre, que l&amp;#39;on va appeler E (comme &amp;quot;entr&amp;eacute;e&amp;quot;), et on veut construire une suite de r&amp;eacute;sultats, contenant les m&amp;ecirc;mes &amp;eacute;l&amp;eacute;ments dans l&amp;#39;ordre, que l&amp;#39;on va appeler S (comme &amp;quot;sortie&amp;quot;).&lt;/p&gt;\r\n\r\n&lt;p&gt;Quel sera le premier &amp;eacute;l&amp;eacute;ment de S ? C&amp;#39;est le plus petit &amp;eacute;l&amp;eacute;ment de E. Il suffit donc de parcourir E, d&amp;#39;en choisir le plus petit &amp;eacute;l&amp;eacute;ment, et de le mettre en premi&amp;egrave;re position dans S. On peut, au passage, l&amp;#39;enlever de la suite E, pour ne pas risquer de se tromper et de l&amp;#39;ajouter plusieurs fois dans S.&lt;/p&gt;\r\n\r\n&lt;p&gt;Quel sera le deuxi&amp;egrave;me &amp;eacute;l&amp;eacute;ment de S ? C&amp;#39;est le deuxi&amp;egrave;me plus petit &amp;eacute;l&amp;eacute;ment de E. Quand on a une suite quelconque, c&amp;#39;est plus difficile de trouver le deuxi&amp;egrave;me plus petit &amp;eacute;l&amp;eacute;ment que le premier (mais ce n&amp;#39;est pas tr&amp;egrave;s difficile, vous pouvez essayer comme&amp;nbsp;&lt;strong&gt;Exercice&lt;/strong&gt;) ; mais ici, on peut jouer sur le fait qu&amp;#39;on a enlev&amp;eacute; le plus petit &amp;eacute;l&amp;eacute;ment, c&amp;#39;est-&amp;agrave;-dire qu&amp;#39;on a &amp;agrave; disposition la suite E&amp;nbsp;&lt;em&gt;priv&amp;eacute;e de son plus petit &amp;eacute;l&amp;eacute;ment&lt;/em&gt;, que l&amp;#39;on peut noter E&amp;#39;. Le deuxi&amp;egrave;me plus petit &amp;eacute;l&amp;eacute;ment de E, c&amp;#39;est clairement le premier plus petit &amp;eacute;l&amp;eacute;ment de E&amp;#39;. Il suffit donc de trouver le plus petit &amp;eacute;l&amp;eacute;ment de E&amp;#39;, le mettre en deuxi&amp;egrave;me position dans S. On peut continuer ainsi pour obtenir le troisi&amp;egrave;me &amp;eacute;l&amp;eacute;ment, etc. , jusqu&amp;#39;au dernier &amp;eacute;l&amp;eacute;ment de S.&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;img alt=&quot;Tri par s&eacute;lection&quot; src=&quot;https://user.oc-static.com/files/155001_156000/155757.png&quot; /&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;Complexit&amp;eacute;&lt;/p&gt;\r\n\r\n&lt;p&gt;Quelle est la complexit&amp;eacute; du tri par s&amp;eacute;lection ? C&amp;#39;est assez simple.&lt;/p&gt;\r\n\r\n&lt;ul&gt;\r\n	&lt;li&gt;\r\n	&lt;p&gt;&amp;Agrave; chaque &amp;eacute;tape, on trouve le plus petit &amp;eacute;l&amp;eacute;ment et on le retire ; comme on l&amp;#39;a d&amp;eacute;j&amp;agrave; vu, trouver le plus petit &amp;eacute;l&amp;eacute;ment est lin&amp;eacute;aire (O(N), o&amp;ugrave; N est le nombre d&amp;#39;&amp;eacute;l&amp;eacute;ments au total) ; retirer un &amp;eacute;l&amp;eacute;ment est lin&amp;eacute;aire aussi.&lt;/p&gt;\r\n	&lt;/li&gt;\r\n	&lt;li&gt;\r\n	&lt;p&gt;On r&amp;eacute;p&amp;egrave;te les &amp;eacute;tapes jusqu&amp;#39;&amp;agrave; avoir retir&amp;eacute; tous les &amp;eacute;l&amp;eacute;ments. On effectue donc N &amp;eacute;tapes, si N est le nombre d&amp;#39;&amp;eacute;l&amp;eacute;ments &amp;agrave; trier. Cela fait donc N fois une op&amp;eacute;ration en O(N), donc du O(N2).&lt;/p&gt;\r\n	&lt;/li&gt;\r\n&lt;/ul&gt;\r\n\r\n&lt;p&gt;Le tri par s&amp;eacute;lection est un algorithme en O(N2), ou&amp;nbsp;&lt;em&gt;quadratique&lt;/em&gt;.&lt;/p&gt;\r\n\r\n&lt;h2&gt;Impl&amp;eacute;mentation du tri par s&amp;eacute;lection&lt;/h2&gt;\r\n\r\n&lt;h3&gt;Pour une liste&lt;/h3&gt;\r\n\r\n&lt;h3&gt;L&amp;#39;algorithme pour les listes est tr&amp;egrave;s clair.&lt;/h3&gt;\r\n\r\n&lt;p&gt;On commence par une fonction&amp;nbsp;&lt;code&gt;retire_min&lt;/code&gt;, qui &amp;agrave; partir d&amp;#39;une liste renvoie son plus petit &amp;eacute;l&amp;eacute;ment, et la suite priv&amp;eacute;e de cet &amp;eacute;l&amp;eacute;ment.&lt;/p&gt;\r\n\r\n&lt;p&gt;Si vous avez lu la premi&amp;egrave;re partie, vous savez d&amp;eacute;j&amp;agrave; r&amp;eacute;cup&amp;eacute;rer le plus petit &amp;eacute;l&amp;eacute;ment d&amp;#39;une liste, en la parcourant en conservant l&amp;#39;information &amp;quot;quel est le plus petit &amp;eacute;l&amp;eacute;ment rencontr&amp;eacute;&amp;nbsp;&lt;em&gt;pour l&amp;#39;instant&lt;/em&gt;&amp;nbsp;?&amp;quot;. On proc&amp;egrave;de de la m&amp;ecirc;me mani&amp;egrave;re, mais on conserve en plus la liste des &amp;eacute;l&amp;eacute;ments non minimums (qui ne sont pas des plus petits &amp;eacute;l&amp;eacute;ments) d&amp;eacute;j&amp;agrave; rencontr&amp;eacute;s : quand on trouve un &amp;eacute;l&amp;eacute;ment plus petit que le minimum courant, on rajoute le minimum courant dans la liste des &amp;quot;non minimums&amp;quot; avant de passer &amp;agrave; l&amp;#39;&amp;eacute;l&amp;eacute;ment suivant, et &amp;agrave; la fin la liste des &amp;quot;non minimum&amp;quot; contient bien tous les &amp;eacute;l&amp;eacute;ments, sauf le plus petit.&lt;/p&gt;\r\n\r\n&lt;p&gt;Une impl&amp;eacute;mentation en caml :&lt;/p&gt;\r\n\r\n&lt;pre&gt;\r\n\r\n&amp;nbsp;&lt;/pre&gt;\r\n\r\n&lt;blockquote&gt;\r\n&lt;p&gt;&lt;code&gt;let rec retire_min min_actuel non_minimums = function &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;| [] -&amp;gt; min_actuel, non_minimums &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;| tete::queue -&amp;gt; &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;(* on met le plus petit (min) comme minimum_actuel, &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;et on rajoute le plus grand (max) dans les non-minimums *) &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;retire_min (min min_actuel tete) (max min_actuel tete :: non_minimums) queue &lt;/code&gt;&lt;/p&gt;\r\n&lt;/blockquote&gt;\r\n\r\n&lt;p&gt;Une impl&amp;eacute;mentation en C :&lt;/p&gt;\r\n\r\n&lt;pre&gt;\r\n\r\n&amp;nbsp;&lt;/pre&gt;\r\n\r\n&lt;blockquote&gt;\r\n&lt;p&gt;&lt;code&gt;List *retire_min(List *liste, List *non_mins, int min_actuel) &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;{ &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;if (NULL == liste) &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;return cons(min_actuel, non_mins); &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;else { &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;int min = (liste-&amp;gt;val &amp;lt; min_actuel ? liste-&amp;gt;val : min_actuel); &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;int non_min = (liste-&amp;gt;val &amp;gt; min_actuel ? liste-&amp;gt;val : min_actuel); &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;return retire_min(liste-&amp;gt;next, cons(non_min, non_mins), min); &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;} &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;} &lt;/code&gt;&lt;/p&gt;\r\n&lt;/blockquote&gt;\r\n\r\n&lt;p&gt;&lt;strong&gt;Remarque :&lt;/strong&gt;&amp;nbsp;avec cette m&amp;eacute;thode, l&amp;#39;ordre des &amp;eacute;l&amp;eacute;ments dans la &amp;quot;liste des non minimums&amp;quot; n&amp;#39;est pas le m&amp;ecirc;me que celui de la liste de d&amp;eacute;part : si un &amp;eacute;l&amp;eacute;ment du d&amp;eacute;but de la liste reste le plus petit pendant longtemps, puis est finalement ajout&amp;eacute; &amp;agrave; la liste&amp;nbsp;&lt;code&gt;non_minimums&lt;/code&gt;, il sera loin de sa position de d&amp;eacute;part (faites dans votre t&amp;ecirc;te un essai sur&amp;nbsp;&lt;code&gt;[1;3;4;5;0]&lt;/code&gt;&amp;nbsp;par exemple ; &amp;agrave; la fin la liste&amp;nbsp;&lt;code&gt;non_minimums&lt;/code&gt;&amp;nbsp;est&amp;nbsp;&lt;code&gt;[3;4;5;1]&lt;/code&gt;&amp;nbsp;: le&amp;nbsp;&lt;code&gt;1&lt;/code&gt;&amp;nbsp;a &amp;eacute;t&amp;eacute; d&amp;eacute;plac&amp;eacute;). Mais ce n&amp;#39;est pas grave, parce qu&amp;#39;on va utiliser cette fonction sur la liste&amp;nbsp;&lt;em&gt;d&amp;#39;entr&amp;eacute;e&lt;/em&gt;, qui est en d&amp;eacute;sordre : on va la trier ensuite, donc ce n&amp;#39;est pas un probl&amp;egrave;me si on bouleverse un peu l&amp;#39;ordre des &amp;eacute;l&amp;eacute;ments en attendant.&lt;/p&gt;\r\n\r\n&lt;p&gt;Ensuite, il est tr&amp;egrave;s facile de d&amp;eacute;crire l&amp;#39;algorithme de tri par s&amp;eacute;lection :&lt;/p&gt;\r\n\r\n&lt;ul&gt;\r\n	&lt;li&gt;\r\n	&lt;p&gt;si la liste E est vide, on renvoie la liste vide&lt;/p&gt;\r\n	&lt;/li&gt;\r\n	&lt;li&gt;\r\n	&lt;p&gt;sinon, on r&amp;eacute;cup&amp;egrave;re P le premier &amp;eacute;l&amp;eacute;ment de E, et E&amp;#39; la liste priv&amp;eacute;e de P, on trie E&amp;#39; et on ajoute P devant&lt;/p&gt;\r\n	&lt;/li&gt;\r\n&lt;/ul&gt;\r\n\r\n&lt;pre&gt;\r\n\r\n&amp;nbsp;&lt;/pre&gt;\r\n\r\n&lt;blockquote&gt;\r\n&lt;p&gt;&lt;code&gt;let rec tri_selection = function &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;| [] -&amp;gt; [] &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;| tete::queue -&amp;gt; &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;let plus_petit, reste = retire_min tete [] queue in &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;plus_petit :: tri_selection reste &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;pre&gt;\r\n\r\n&amp;nbsp;&lt;/pre&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;List *tri_selection(List *liste) &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;{ &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;if (NULL == liste) &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;return NULL; &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;else { &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;List *selection, *resultat; &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;selection = retire_min(liste-&amp;gt;next, NULL, liste-&amp;gt;val); &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;resultat = cons(selection-&amp;gt;val, tri_selection(selection-&amp;gt;next)); &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;free_list(selection); /* on lib&amp;egrave;re la liste interm&amp;eacute;diaire */ &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;return resultat; &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;} &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;} &lt;/code&gt;&lt;/p&gt;\r\n&lt;/blockquote&gt;\r\n\r\n&lt;p&gt;&lt;strong&gt;Remarque :&lt;/strong&gt;&amp;nbsp;on pourrait modifier l&amp;#39;impl&amp;eacute;mentation C de&amp;nbsp;&lt;code&gt;retire_min&lt;/code&gt;&amp;nbsp;pour modifier la liste qu&amp;#39;on lui donne au lieu d&amp;#39;en allouer une nouvelle qu&amp;#39;il faut lib&amp;eacute;rer ensuite. Comme &amp;ccedil;a ne changerait rien &amp;agrave; la complexit&amp;eacute; de l&amp;#39;algorithme (on doit parcourir la liste dans tous les cas, pour trouver le minimum), j&amp;#39;ai choisi de privil&amp;eacute;gier la simplicit&amp;eacute;.&lt;/p&gt;\r\n\r\n&lt;p&gt;De mani&amp;egrave;re g&amp;eacute;n&amp;eacute;rale, les codes que je mets dans ce tutoriel n&amp;#39;ont pas pour but d&amp;#39;&amp;ecirc;tre les plus rapides possibles, mais d&amp;#39;&amp;ecirc;tre les plus clairs possible (en ayant la bonne complexit&amp;eacute;). Il y a de nombreuses autres fa&amp;ccedil;ons d&amp;#39;&amp;eacute;crire le m&amp;ecirc;me algorithme, certaines &amp;eacute;tant plus performantes ou moins lisibles. Si vous avez un code plus efficace mais plus compliqu&amp;eacute; pour le m&amp;ecirc;me algorithme, vous pouvez le poster en commentaire, mais je ne changerai l&amp;#39;impl&amp;eacute;mentation du tutoriel que si vous m&amp;#39;en proposez une plus simple ou aussi simple.&lt;/p&gt;\r\n\r\n&lt;h3&gt;Pour un tableau&lt;/h3&gt;\r\n\r\n&lt;p&gt;Quand on trie une liste, on renvoie une nouvelle liste, sans modifier la liste de d&amp;eacute;part. Pour trier un tableau, on proc&amp;egrave;de souvent (quand l&amp;#39;algorithme s&amp;#39;y pr&amp;ecirc;te) diff&amp;eacute;remment : au lieu d&amp;#39;&amp;eacute;crire les &amp;eacute;l&amp;eacute;ments dans l&amp;#39;ordre dans un nouveau tableau, on modifie le tableau d&amp;#39;entr&amp;eacute;e en r&amp;eacute;ordonnant les &amp;eacute;l&amp;eacute;ments &amp;agrave; l&amp;#39;int&amp;eacute;rieur.&lt;/p&gt;\r\n\r\n&lt;p&gt;Cette approche a un avantage et un inconv&amp;eacute;nient. L&amp;#39;avantage c&amp;#39;est qu&amp;#39;il n&amp;#39;y a pas besoin de cr&amp;eacute;er un deuxi&amp;egrave;me tableau, ce qui utilise donc moins de m&amp;eacute;moire. On dit que c&amp;#39;est un tri&amp;nbsp;&lt;em&gt;en place&lt;/em&gt;&amp;nbsp;(tout est fait sur place, on n&amp;#39;a rien rajout&amp;eacute;). L&amp;#39;inconv&amp;eacute;nient c&amp;#39;est que le tableau de d&amp;eacute;part est modifi&amp;eacute;. Si pour une raison ou une autre vous aviez envie de conserver aussi l&amp;#39;ordre initial des &amp;eacute;l&amp;eacute;ments (par exemple, si vous vouliez vous souvenir aussi de l&amp;#39;ordre dans lequel les donn&amp;eacute;es sont arriv&amp;eacute;es), il est perdu et vous ne pourrez pas le retrouver, &amp;agrave; moins de l&amp;#39;avoir sauvegard&amp;eacute; dans un autre tableau avant le tri.&lt;/p&gt;\r\n\r\n&lt;p&gt;On commence par une fonction qui &amp;eacute;change la position de deux &amp;eacute;l&amp;eacute;ments dans un tableau.&lt;/p&gt;\r\n\r\n&lt;pre&gt;\r\n\r\n&amp;nbsp;&lt;/pre&gt;\r\n\r\n&lt;blockquote&gt;\r\n&lt;p&gt;&lt;code&gt;&amp;lt;?php &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;function echange(&amp;amp;$tab, $i, $j) &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;{ &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;if ($i != $j) { &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;$temporaire = $tab[$i]; &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;$tab[$i] = $tab[$j]; &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;$tab[$j] = $temporaire; &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;} &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;} &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;?&amp;gt; &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;pre&gt;\r\n\r\n&amp;nbsp;&lt;/pre&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;void echange(int tab[], int i, int j) &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;{ &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;if (i != j) { &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;int temp = tab[i]; &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;tab[i] = tab[j]; &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;tab[j] = temp; &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;} &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;} &lt;/code&gt;&lt;/p&gt;\r\n&lt;/blockquote&gt;\r\n\r\n&lt;p&gt;Au lieu de stocker la&amp;nbsp;&lt;em&gt;valeur&lt;/em&gt;&amp;nbsp;du minimum, on stocke son&amp;nbsp;&lt;em&gt;indice&lt;/em&gt;&amp;nbsp;(sa position dans le tableau) pour pouvoir &amp;eacute;changer les cases ensuite.&lt;/p&gt;\r\n\r\n&lt;pre&gt;\r\n\r\n&amp;nbsp;&lt;/pre&gt;\r\n\r\n&lt;blockquote&gt;\r\n&lt;p&gt;&lt;code&gt;&amp;lt;?php &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;function tri_selection(&amp;amp;$tab) &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;{ &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;$taille = count($tab); &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;for ($i = 0; $i &amp;lt; $taille - 1; ++$i) { &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;$i_min = $i; &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;for ($j = $i+1; $j &amp;lt; $taille; ++$j) &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;if ($tab[$j] &amp;lt; $tab[$i_min]) &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;$i_min = $j; &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;echange($tab,$i,$i_min); &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;} &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;} &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;?&amp;gt; &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;pre&gt;\r\n\r\n&amp;nbsp;&lt;/pre&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;void tri_selection(int tab[], int taille) &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;{ &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;int i, j; &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;for (i = 0; i &amp;lt; taille - 1; ++i) { &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;int i_min = i; &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;for (j = i + 1; j &amp;lt; taille; ++j) &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;if (tab[j] &amp;lt; tab[i_min]) &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;i_min = j; &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;echange(tab, i, i_min); &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;} &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;} &lt;/code&gt;&lt;/p&gt;\r\n&lt;/blockquote&gt;\r\n\r\n&lt;p&gt;On parcourt le tableau avec un indice&amp;nbsp;&lt;code&gt;i&lt;/code&gt;&amp;nbsp;qui va de 0 &amp;agrave; la fin du tableau. Pendant le parcours, le tableau est divis&amp;eacute; en deux parties : &amp;agrave; gauche de&amp;nbsp;&lt;code&gt;i&lt;/code&gt;&amp;nbsp;(les indices&amp;nbsp;&lt;code&gt;0&amp;nbsp;..&amp;nbsp;i-1&lt;/code&gt;) se trouvent les petits &amp;eacute;l&amp;eacute;ments, tri&amp;eacute;s, et &amp;agrave; droite les autres &amp;eacute;l&amp;eacute;ments dans le d&amp;eacute;sordre. &amp;Agrave; chaque tour de boucle, on calcule le plus petit &amp;eacute;l&amp;eacute;ment de la partie non encore tri&amp;eacute;e, et on l&amp;#39;&amp;eacute;change avec l&amp;#39;&amp;eacute;l&amp;eacute;ment plac&amp;eacute; en&amp;nbsp;&lt;code&gt;i&lt;/code&gt;. Ainsi, la partie&amp;nbsp;&lt;code&gt;0&amp;nbsp;..&amp;nbsp;i&lt;/code&gt;&amp;nbsp;du tableau est tri&amp;eacute;e, et on peut continuer &amp;agrave; partir de&amp;nbsp;&lt;code&gt;i+1&lt;/code&gt;&amp;nbsp;; &amp;agrave; la fin le tableau sera compl&amp;egrave;tement tri&amp;eacute;. Pour faire le parall&amp;egrave;le avec les listes, au lieu de retirer l&amp;#39;&amp;eacute;l&amp;eacute;ment du tableau, on le met dans une partie du tableau qu&amp;#39;on ne parcours plus ensuite.&lt;/p&gt;\r\n\r\n&lt;p&gt;Remarque : la boucle sur&amp;nbsp;&lt;code&gt;i&lt;/code&gt;&amp;nbsp;s&amp;#39;arr&amp;ecirc;te en fait avant&amp;nbsp;&lt;code&gt;taille-1&lt;/code&gt;, et pas avant&amp;nbsp;&lt;code&gt;taille&lt;/code&gt;comme d&amp;#39;habitude : quand il ne reste plus qu&amp;#39;un seul &amp;eacute;l&amp;eacute;ment &amp;agrave; trier, il n&amp;#39;y a rien &amp;agrave; faire : il est forc&amp;eacute;ment plus grand que tous les &amp;eacute;l&amp;eacute;ments pr&amp;eacute;c&amp;eacute;dents, sinon il aurait &amp;eacute;t&amp;eacute; choisi comme minimum et &amp;eacute;chang&amp;eacute;, donc il est &amp;agrave; la bonne position.&lt;/p&gt;\r\n\r\n&lt;p&gt;La fonction ne renvoie rien, mais apr&amp;egrave;s son ex&amp;eacute;cution le tableau d&amp;#39;entr&amp;eacute;e est tri&amp;eacute;.&lt;/p&gt;\r\n\r\n&lt;pre&gt;\r\n\r\n&amp;nbsp;&lt;/pre&gt;\r\n\r\n&lt;blockquote&gt;\r\n&lt;p&gt;&lt;code&gt;&amp;lt;?php // exemple : &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;$tab = array(1,5,4,3,6); &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;tri_selection($tab); // modifie le tableau $tab &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;print_r($tab); &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;?&amp;gt; &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;pre&gt;\r\n\r\n&amp;nbsp;&lt;/pre&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;#define N 5 &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;int main() &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;{ &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;int i, tab[N] = {1,5,4,3,6}; &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;tri_selection(tab, N); /* modifie le tableau `tab` */ &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;for (i = 0; i &amp;lt; N; ++i) &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;printf(&amp;quot;%d &amp;quot;, tab[i]); &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;printf(&amp;quot;\\n&amp;quot;); &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;return 0; &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;} &lt;/code&gt;&lt;/p&gt;\r\n&lt;/blockquote&gt;\r\n\r\n&lt;h3&gt;Comparaison&lt;/h3&gt;\r\n\r\n&lt;p&gt;Les deux impl&amp;eacute;mentations de la m&amp;ecirc;me id&amp;eacute;e illustrent bien les diff&amp;eacute;rences majeures entre les listes et les tableaux. On utilise dans un cas la possibilit&amp;eacute; d&amp;#39;ajouter et d&amp;#39;enlever facilement des &amp;eacute;l&amp;eacute;ments &amp;agrave; une liste, et dans l&amp;#39;autre l&amp;#39;acc&amp;egrave;s arbitraire qui permet de parcourir, comparer et &amp;eacute;changer seulement des cases bien pr&amp;eacute;cises du tableau.&lt;/p&gt;\r\n\r\n&lt;p&gt;Tri par insertion&lt;/p&gt;\r\n\r\n&lt;p&gt;Il existe un tri tr&amp;egrave;s proche du tri par s&amp;eacute;lection, appel&amp;eacute;&amp;nbsp;&lt;em&gt;tri par insertion&lt;/em&gt;, qui a la m&amp;ecirc;me complexit&amp;eacute; (O(N2)) mais est en pratique plus efficace (car il effectue moins de comparaisons). Vous pouvez vous r&amp;eacute;f&amp;eacute;rer &amp;agrave; deux tutoriels le d&amp;eacute;crivant :&lt;/p&gt;\r\n\r\n&lt;ul&gt;\r\n	&lt;li&gt;\r\n	&lt;p&gt;&lt;a href=&quot;http://www.siteduzero.com/tutoriel-3-36679-le-tri-par-insertion.html&quot;&gt;une version avec des tableaux, &amp;agrave; lire en premier, impl&amp;eacute;ment&amp;eacute;e en C&lt;/a&gt;&lt;/p&gt;\r\n	&lt;/li&gt;\r\n	&lt;li&gt;\r\n	&lt;p&gt;&lt;a href=&quot;http://www.siteduzero.com/tutoriel-3-36863-tri-par-insertion-le-retour-ocaml.html&quot;&gt;une version avec des listes, impl&amp;eacute;ment&amp;eacute;e en OCaml&lt;/a&gt;&lt;/p&gt;\r\n	&lt;/li&gt;\r\n&lt;/ul&gt;\r\n\r\n&lt;h2&gt;Le retour du &amp;quot;diviser pour r&amp;eacute;gner&amp;quot; : Tri fusion&lt;/h2&gt;\r\n\r\n&lt;p&gt;Vous avez maintenant vu le tri par s&amp;eacute;lection, dont le fonctionnement est assez naturel. Vous vous dites peut-&amp;ecirc;tre que finalement, ce tuto est assez inutile, puisqu&amp;#39;il ne fait que parler longuement de chose assez &amp;eacute;videntes. D&amp;eacute;couvrir que pour trier une liste il faut commencer par chercher le plus petit &amp;eacute;l&amp;eacute;ment, merci, votre petite soeur de deux ans et demi l&amp;#39;aurait devin&amp;eacute; (et en plus, elle est mignonne, et elle mange de la pur&amp;eacute;e de potiron, avantages d&amp;eacute;cisifs qui manquent &amp;agrave; ce modeste tutoriel).&lt;/p&gt;\r\n\r\n&lt;p&gt;Nous allons maintenant voir un autre tri, le tri par fusion. Il est surprenant par deux aspects, qui sont tr&amp;egrave;s li&amp;eacute;s :&lt;/p&gt;\r\n\r\n&lt;ul&gt;\r\n	&lt;li&gt;\r\n	&lt;p&gt;il n&amp;#39;est pas du tout naturel au d&amp;eacute;part ;&lt;/p&gt;\r\n	&lt;/li&gt;\r\n	&lt;li&gt;\r\n	&lt;p&gt;il est&amp;nbsp;&lt;em&gt;beaucoup&lt;/em&gt;&amp;nbsp;plus efficace que les tri quadratiques vus jusqu&amp;#39;&amp;agrave; pr&amp;eacute;sent.&lt;/p&gt;\r\n	&lt;/li&gt;\r\n&lt;/ul&gt;\r\n\r\n&lt;p&gt;C&amp;#39;est en effet un tri qui a une complexit&amp;eacute; bien meilleure que les tris par s&amp;eacute;lection ou insertion. On ne le voit pas sur un petit nombre d&amp;#39;&amp;eacute;l&amp;eacute;ment, mais sur de tr&amp;egrave;s gros volumes c&amp;#39;est d&amp;eacute;cisif. Nous verrons sa complexit&amp;eacute; en d&amp;eacute;tail apr&amp;egrave;s avoir d&amp;eacute;crit l&amp;#39;algorithme.&lt;/p&gt;\r\n\r\n&lt;h3&gt;Algorithme&lt;/h3&gt;\r\n\r\n&lt;p&gt;L&amp;#39;id&amp;eacute;e du tri par fusion se d&amp;eacute;crit en une phrase :&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;cite&gt;Citation&lt;/cite&gt;&lt;/p&gt;\r\n\r\n&lt;blockquote&gt;\r\n&lt;p&gt;on coupe la liste en deux parts &amp;eacute;gales, on trie chaque moiti&amp;eacute;, et on fusionne les deux demi-listes&lt;/p&gt;\r\n&lt;/blockquote&gt;\r\n\r\n&lt;p&gt;&lt;img alt=&quot;Tri par fusion&quot; src=&quot;https://user.oc-static.com/files/155001_156000/155758.png&quot; /&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;Vous avez bien entendu reconnu une approche de type &amp;quot;diviser pour r&amp;eacute;gner&amp;quot; : on d&amp;eacute;coupe le probl&amp;egrave;me (un tableau =&amp;gt; deux demi-tableaux), on traite chaque sous-probl&amp;egrave;me s&amp;eacute;par&amp;eacute;ment, puis on rassemble les r&amp;eacute;sultats de mani&amp;egrave;re intelligente.&lt;/p&gt;\r\n\r\n&lt;p&gt;&amp;Eacute;videmment, tout le sel de la chose se situe dans la phase de&amp;nbsp;&lt;em&gt;fusion&lt;/em&gt;&amp;nbsp;: on a deux demi-listes tri&amp;eacute;es, et on veut obtenir une liste tri&amp;eacute;e. On pourrait se dire qu&amp;#39;il suffit de mettre les deux listes bout &amp;agrave; bout, par exemple si on a les deux listes tri&amp;eacute;es&amp;nbsp;&lt;code&gt;[1;&amp;nbsp;2;&amp;nbsp;3]&lt;/code&gt;&amp;nbsp;et&amp;nbsp;&lt;code&gt;[4; 5;&amp;nbsp;6]&lt;/code&gt;, on les colle et pouf&amp;nbsp;&lt;code&gt;[1;2;3;4;5;6]&lt;/code&gt;. Malheureusement, &amp;ccedil;a ne marche pas, prenez par exemple&amp;nbsp;&lt;code&gt;[1;&amp;nbsp;3;&amp;nbsp;6]&lt;/code&gt;&amp;nbsp;et&amp;nbsp;&lt;code&gt;[2;&amp;nbsp;4;&amp;nbsp;5]&lt;/code&gt;. Il y a bien quelque chose &amp;agrave; faire, et ce&amp;nbsp;&lt;em&gt;quelque chose&lt;/em&gt;&amp;nbsp;a int&amp;eacute;r&amp;ecirc;t &amp;agrave; &amp;ecirc;tre efficace : si cette op&amp;eacute;ration cruciale du tri est trop lente, on peut jeter l&amp;#39;ensemble.&lt;/p&gt;\r\n\r\n&lt;p&gt;L&amp;#39;id&amp;eacute;e qui permet d&amp;#39;avoir une fusion efficace repose sur le fait que les deux listes sont tri&amp;eacute;es. Il suffit en fait de les parcourir dans l&amp;#39;ordre : on sait que les plus petits &amp;eacute;l&amp;eacute;ments des deux listes sont au d&amp;eacute;but, et le plus petit &amp;eacute;l&amp;eacute;ment de la liste globale est forc&amp;eacute;ment soit le plus petit &amp;eacute;l&amp;eacute;ment de la premi&amp;egrave;re liste, soit le plus petit &amp;eacute;l&amp;eacute;ment de la deuxi&amp;egrave;me (c&amp;#39;est le plus petit des deux). Une fois qu&amp;#39;on l&amp;#39;a d&amp;eacute;termin&amp;eacute;, on le retire de la demi-liste dans laquelle il se trouve, et on recommence &amp;agrave; regarder les &amp;eacute;l&amp;eacute;ments du d&amp;eacute;but. Une fois qu&amp;#39;on a &amp;eacute;puis&amp;eacute; les deux demi-listes, on a bien effectu&amp;eacute; la fusion.&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;img alt=&quot;Fusion de deux collections tri&eacute;es&quot; src=&quot;https://user.oc-static.com/files/155001_156000/155759.png&quot; /&gt;&lt;/p&gt;\r\n\r\n&lt;h3&gt;Impl&amp;eacute;mentation avec des listes&lt;/h3&gt;\r\n\r\n&lt;p&gt;Commen&amp;ccedil;ons par coder l&amp;#39;op&amp;eacute;ration de fusion d&amp;#39;un couple de listes :&lt;/p&gt;\r\n\r\n&lt;ul&gt;\r\n	&lt;li&gt;\r\n	&lt;p&gt;si l&amp;#39;une des listes est vide, on renvoie l&amp;#39;autre liste ;&lt;/p&gt;\r\n	&lt;/li&gt;\r\n	&lt;li&gt;\r\n	&lt;p&gt;sinon, on compare les t&amp;ecirc;tes de chaque liste, on prend la plus petite et on rappelle la fusion sur la queue de cette liste, et l&amp;#39;autre demi-liste.&lt;/p&gt;\r\n	&lt;/li&gt;\r\n&lt;/ul&gt;\r\n\r\n&lt;p&gt;En Caml :&lt;/p&gt;\r\n\r\n&lt;pre&gt;\r\n\r\n&amp;nbsp;&lt;/pre&gt;\r\n\r\n&lt;blockquote&gt;\r\n&lt;p&gt;&lt;code&gt;let rec fusion = function &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;| ([], li) | (li, []) -&amp;gt; li &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;| tete_a::queue_a, tete_b::queue_b -&amp;gt; &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;let bonne_tete, queue, autre_demi_liste = &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;if tete_a &amp;lt; tete_b &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;then tete_a, queue_a, tete_b::queue_b &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;else tete_b, queue_b, tete_a::queue_a in &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;bonne_tete :: fusion (queue, autre_demi_liste) &lt;/code&gt;&lt;/p&gt;\r\n&lt;/blockquote&gt;\r\n\r\n&lt;p&gt;En C :&lt;br /&gt;\r\nLa version la plus simple est la suivante :&lt;/p&gt;\r\n\r\n&lt;pre&gt;\r\n\r\n&amp;nbsp;&lt;/pre&gt;\r\n\r\n&lt;blockquote&gt;\r\n&lt;p&gt;&lt;code&gt;List *fusion(List *gauche, List *droite) &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;{ &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;if (NULL == gauche) &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;return droite; &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;if (NULL == droite) &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;return gauche; &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;if (gauche-&amp;gt;val &amp;lt;= droite-&amp;gt;val) &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;return cons(gauche-&amp;gt;val, fusion(gauche-&amp;gt;next, droite)); &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;else &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;return cons(droite-&amp;gt;val, fusion(gauche, droite-&amp;gt;next)); &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;} &lt;/code&gt;&lt;/p&gt;\r\n&lt;/blockquote&gt;\r\n\r\n&lt;p&gt;Cette version pose cependant un probl&amp;egrave;me. Comme j&amp;#39;en ai d&amp;eacute;j&amp;agrave; parl&amp;eacute; pour&amp;nbsp;&lt;a href=&quot;http://www.siteduzero.com/tutoriel-3-69466-notions-de-structures-de-donnees-tableaux-et-listes-chainees.html#ss_part_3&quot;&gt;l&amp;#39;op&amp;eacute;ration de concat&amp;eacute;nation&lt;/a&gt;, il faut parfois faire attention aux risques d&amp;#39;effets de bord : si on modifie la liste de r&amp;eacute;sultat, est-ce que les listes de d&amp;eacute;part sont modifi&amp;eacute;es ?&lt;/p&gt;\r\n\r\n&lt;p&gt;Dans l&amp;#39;impl&amp;eacute;mentation que je viens de donner, la r&amp;eacute;ponse est&amp;nbsp;&lt;em&gt;oui&lt;/em&gt;&amp;nbsp;: quand on fusionne deux listes, si on arrive &amp;agrave; la fin de la liste de gauche (&lt;code&gt;NULL&amp;nbsp;==&amp;nbsp;gauche&lt;/code&gt;), alors on renvoie la liste de droite (&lt;code&gt;return&amp;nbsp;droite;&lt;/code&gt;). Cela veut dire que si on modifie la fin de la liste, la liste de droite qu&amp;#39;on a pass&amp;eacute; en param&amp;egrave;tre sera modifi&amp;eacute;e aussi :&lt;/p&gt;\r\n\r\n&lt;pre&gt;\r\n\r\n&amp;nbsp;&lt;/pre&gt;\r\n\r\n&lt;blockquote&gt;\r\n&lt;p&gt;&lt;code&gt;void print_list(List *liste) &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;{ &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;while (NULL != liste) { &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;printf(&amp;quot;%d &amp;quot;, liste-&amp;gt;val); &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;liste = liste-&amp;gt;next; &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;} &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;printf(&amp;quot;\\n&amp;quot;); &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;} &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;int main() &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;{ &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;List *a, *b, *c; &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;printf(&amp;quot;&amp;Eacute;l&amp;eacute;ments de a :\\n&amp;quot;); &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;a = cons(1, NULL); &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;print_list(a); &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;printf(&amp;quot;&amp;Eacute;l&amp;eacute;ments de b :\\n&amp;quot;); &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;b = cons(2, cons(3, NULL)); &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;print_list(b); &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;printf(&amp;quot;&amp;Eacute;l&amp;eacute;ments de c = fusion(a,b) :\\n&amp;quot;); &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;c = fusion(a, b); &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;print_list(c); &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;printf(&amp;quot;Modification du troisi&amp;egrave;me &amp;eacute;l&amp;eacute;ment c :\\n&amp;quot;); &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;c-&amp;gt;next-&amp;gt;next-&amp;gt;val = 5; &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;print_list(c); &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;printf(&amp;quot;Est-ce que b a &amp;eacute;t&amp;eacute; modifi&amp;eacute;e ?\\n&amp;quot;); &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;print_list(b); &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;free_list(a); &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;free_list(c); &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;return 0; &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;} &lt;/code&gt;&lt;/p&gt;\r\n&lt;/blockquote&gt;\r\n\r\n&lt;p&gt;La derni&amp;egrave;re ligne affiche &amp;quot;2 5&amp;quot; : b a &amp;eacute;t&amp;eacute; modifi&amp;eacute;e quand on a chang&amp;eacute; c !&lt;/p&gt;\r\n\r\n&lt;p&gt;Ce comportement est dangereux et risque de conduire &amp;agrave; des bugs (question bonus : pourquoi seulement&amp;nbsp;&lt;code&gt;free_list(a);&amp;nbsp;free_list(c);&lt;/code&gt;&amp;nbsp;?). On peut peut-&amp;ecirc;tre s&amp;#39;en sortir (en faisant attention &amp;agrave; ne faire des fusions que de listes temporaires dont on n&amp;#39;aura pas besoin ensuite), mais je pr&amp;eacute;f&amp;egrave;re m&amp;#39;assurer qu&amp;#39;il n&amp;#39;y a aucun risque et coder une nouvelle version de&amp;nbsp;&lt;code&gt;fusion&lt;/code&gt;&amp;nbsp;qui&amp;nbsp;&lt;em&gt;copie&lt;/em&gt;&amp;nbsp;les &amp;eacute;l&amp;eacute;ments des listes au lieu de les reprendre directement. Ce sera un peu moins rapide, mais la complexit&amp;eacute; sera la m&amp;ecirc;me, et les chances de bugs plus petites. Si vous aimez jouer avec le feu, vous pouvez essayer de coder&amp;nbsp;&lt;code&gt;tri_fusion&lt;/code&gt;&amp;nbsp;sans ces copies suppl&amp;eacute;mentaires.&lt;/p&gt;\r\n\r\n&lt;pre&gt;\r\n\r\n&amp;nbsp;&lt;/pre&gt;\r\n\r\n&lt;blockquote&gt;\r\n&lt;p&gt;&lt;code&gt;List *copy_list(List *liste) &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;{ &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;if (NULL == liste) &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;return NULL; &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;else return cons(liste-&amp;gt;val, copy_list(liste-&amp;gt;next)); &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;} &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;List *fusion(List *gauche, List *droite) &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;{ &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;if (NULL == gauche) &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;return copy_list(droite); &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;else if (NULL == droite) &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;return copy_list(gauche); &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;else if (gauche-&amp;gt;val &amp;lt;= droite-&amp;gt;val) &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;return cons(gauche-&amp;gt;val, fusion(gauche-&amp;gt;next, droite)); &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;else &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;return cons(droite-&amp;gt;val, fusion(gauche, droite-&amp;gt;next)); &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;} &lt;/code&gt;&lt;/p&gt;\r\n&lt;/blockquote&gt;\r\n\r\n&lt;p&gt;Il y a une autre op&amp;eacute;ration &amp;agrave; impl&amp;eacute;menter : la d&amp;eacute;coupe d&amp;#39;une liste en deux demi-listes. On parcourt la liste par bloc de deux &amp;eacute;l&amp;eacute;ments, en ajoutant le premier dans la demi-liste de gauche, le deuxi&amp;egrave;me dans la demi-liste de droite. S&amp;#39;il reste moins de deux &amp;eacute;l&amp;eacute;ments, on met la liste n&amp;#39;importe o&amp;ugrave; (par exemple &amp;agrave; gauche) et on met une liste vide de l&amp;#39;autre c&amp;ocirc;t&amp;eacute;.&lt;/p&gt;\r\n\r\n&lt;p&gt;En Caml :&lt;/p&gt;\r\n\r\n&lt;pre&gt;\r\n\r\n&amp;nbsp;&lt;/pre&gt;\r\n\r\n&lt;blockquote&gt;\r\n&lt;p&gt;&lt;code&gt;let rec decoupe = function &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;| ([] | [_]) as liste -&amp;gt; (liste, []) &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;| gauche::droite::reste -&amp;gt; &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;let (reste_gauche, reste_droite) = decoupe reste in &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;gauche :: reste_gauche, droite :: reste_droite &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;En C :&lt;/p&gt;\r\n\r\n&lt;pre&gt;\r\n\r\n&amp;nbsp;&lt;/pre&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;void decoupe(List *liste, List **gauche, List **droite) &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;{ &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;do { &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;if (NULL != liste) { &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;*gauche = cons(liste-&amp;gt;val, *gauche); &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;liste = liste-&amp;gt;next; &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;} &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;if (NULL != liste) { &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;*droite = cons(liste-&amp;gt;val, *droite); &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;liste = liste-&amp;gt;next; &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;} &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;} while (NULL != liste); &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;} &lt;/code&gt;&lt;/p&gt;\r\n&lt;/blockquote&gt;\r\n\r\n&lt;p&gt;On peut alors &amp;eacute;crire facilement le tri (s&amp;#39;il reste moins de deux &amp;eacute;l&amp;eacute;ments, la liste est d&amp;eacute;j&amp;agrave; tri&amp;eacute;e donc on la renvoie directement) :&lt;/p&gt;\r\n\r\n&lt;p&gt;En Caml :&lt;/p&gt;\r\n\r\n&lt;pre&gt;\r\n\r\n&amp;nbsp;&lt;/pre&gt;\r\n\r\n&lt;blockquote&gt;\r\n&lt;p&gt;&lt;code&gt;let rec tri_fusion = function &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;| ([] | [_]) as liste_triee -&amp;gt; liste_triee &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;| liste -&amp;gt; &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;let demi_gauche, demi_droite = decoupe liste in &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;fusion (tri_fusion demi_gauche, tri_fusion demi_droite) &lt;/code&gt;&lt;/p&gt;\r\n&lt;/blockquote&gt;\r\n\r\n&lt;p&gt;En C :&lt;br /&gt;\r\nDans l&amp;#39;impl&amp;eacute;mentation en C, il faut faire attention &amp;agrave; bien lib&amp;eacute;rer la m&amp;eacute;moire allou&amp;eacute;e par les listes temporaires : les r&amp;eacute;sultats de&amp;nbsp;&lt;code&gt;decoupe&lt;/code&gt;,&amp;nbsp;&lt;code&gt;fusion&lt;/code&gt;&amp;nbsp;et&amp;nbsp;&lt;code&gt;tri_fusion&lt;/code&gt;.&lt;/p&gt;\r\n\r\n&lt;pre&gt;\r\n\r\n&amp;nbsp;&lt;/pre&gt;\r\n\r\n&lt;blockquote&gt;\r\n&lt;p&gt;&lt;code&gt;List *tri_fusion(List *liste) &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;{ &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;if (NULL == liste || NULL == liste-&amp;gt;next) &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;return copy_list(liste); &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;else { &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;List *gauche, *droite, *gauche_triee, *droite_triee, *resultat; &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;/* au d&amp;eacute;but, gauche et droite sont vides */ &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;gauche = NULL; &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;droite = NULL; &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;/* on decoupe la liste en gauche et droite */ &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;decoupe(liste, &amp;amp;gauche, &amp;amp;droite); &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;/* on trie gauche et droite, avant de les lib&amp;eacute;rer */ &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;gauche_triee = tri_fusion(gauche); &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;droite_triee = tri_fusion(droite); &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;free_list(gauche); &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;free_list(droite); &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;/* on fait la fusion des deux listes tri&amp;eacute;es, avant de les lib&amp;eacute;rer */ &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;resultat = fusion(gauche_triee, droite_triee); &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;free_list(gauche_triee); &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;free_list(droite_triee); &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;/* il ne reste plus qu&amp;#39;&amp;agrave; renvoyer le r&amp;eacute;sultat */ &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;return resultat; &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;} &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;} &lt;/code&gt;&lt;/p&gt;\r\n&lt;/blockquote&gt;\r\n\r\n&lt;p&gt;Code de test :&lt;/p&gt;\r\n\r\n&lt;pre&gt;\r\n\r\n&amp;nbsp;&lt;/pre&gt;\r\n\r\n&lt;blockquote&gt;\r\n&lt;p&gt;&lt;code&gt;int main() &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;{ &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;List *a, *b, *c; &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;a = cons(1, cons(5, cons(4, cons(3, cons(6, NULL))))); &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;b = tri_fusion(a); &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;print_list(a); &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;print_list(b); &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;free_list(a); &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;free_list(b); &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;return 0; &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;} &lt;/code&gt;&lt;/p&gt;\r\n&lt;/blockquote&gt;\r\n\r\n&lt;p&gt;Impl&amp;eacute;mentation avec des tableaux&lt;/p&gt;\r\n\r\n&lt;p&gt;L&amp;#39;impl&amp;eacute;mentation avec des tableaux a des avantages et des inconv&amp;eacute;nients.&lt;/p&gt;\r\n\r\n&lt;ul&gt;\r\n	&lt;li&gt;\r\n	&lt;p&gt;La phase de d&amp;eacute;coupe est tr&amp;egrave;s simple : comme on conna&amp;icirc;t &amp;agrave; l&amp;#39;avance la taille du tableau, il suffit de la diviser par deux et de couper au milieu&lt;/p&gt;\r\n	&lt;/li&gt;\r\n	&lt;li&gt;\r\n	&lt;p&gt;l&amp;#39;op&amp;eacute;ration de fusion est moins naturelle : il faut manipuler les indices&lt;/p&gt;\r\n	&lt;/li&gt;\r\n&lt;/ul&gt;\r\n\r\n&lt;p&gt;On commence par coder l&amp;#39;op&amp;eacute;ration de fusion. On proc&amp;egrave;de &amp;agrave; peu pr&amp;egrave;s comme pour les listes, sauf qu&amp;#39;au lieu d&amp;#39;utiliser une proc&amp;eacute;dure r&amp;eacute;cursive, on utilise une boucle pour parcourir les tableaux. On doit conserver trois indices diff&amp;eacute;rents :&lt;/p&gt;\r\n\r\n&lt;ul&gt;\r\n	&lt;li&gt;\r\n	&lt;p&gt;la position de lecture dans le premier demi-tableau&lt;/p&gt;\r\n	&lt;/li&gt;\r\n	&lt;li&gt;\r\n	&lt;p&gt;la position de lecture le deuxi&amp;egrave;me demi-tableau&lt;/p&gt;\r\n	&lt;/li&gt;\r\n	&lt;li&gt;\r\n	&lt;p&gt;la position d&amp;#39;&amp;eacute;criture dans le tableau r&amp;eacute;sultat&lt;/p&gt;\r\n	&lt;/li&gt;\r\n&lt;/ul&gt;\r\n\r\n&lt;p&gt;Le dernier indice &amp;eacute;volue de fa&amp;ccedil;on pr&amp;eacute;visible : &amp;agrave; chaque fois qu&amp;#39;on choisit un &amp;eacute;l&amp;eacute;ment dans l&amp;#39;une des demi-listes, il augmente de 1. On peut donc l&amp;#39;utiliser comme indice d&amp;#39;une boucle&amp;nbsp;&lt;code&gt;for&lt;/code&gt;.&lt;/p&gt;\r\n\r\n&lt;p&gt;Quand on compare les &amp;eacute;l&amp;eacute;ments en t&amp;ecirc;te des deux demi-listes, il faut faire attention &amp;agrave; v&amp;eacute;rifier qu&amp;#39;aucune demi-liste n&amp;#39;est &amp;quot;&amp;eacute;puis&amp;eacute;e&amp;quot; (on a pris tous ses &amp;eacute;l&amp;eacute;ments, donc l&amp;#39;indice correspondant est sup&amp;eacute;rieur ou &amp;eacute;gal &amp;agrave; sa taille).&lt;/p&gt;\r\n\r\n&lt;pre&gt;\r\n\r\n&amp;nbsp;&lt;/pre&gt;\r\n\r\n&lt;blockquote&gt;\r\n&lt;p&gt;&lt;code&gt;&amp;lt;?php &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;function fusion($tab_g, $tab_d) &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;{ &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;$taille_g = count($tab_g); &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;$taille_d = count($tab_d); &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;$res = array(); // tableau r&amp;eacute;sultat &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;$i_g = 0; $i_d = 0; // indices de lecture, g-&amp;gt;gauche, d-&amp;gt;droite &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;for ($i = 0; $i_g &amp;lt; $taille_g &amp;amp;&amp;amp; $i_d &amp;lt; $taille_d; ++$i) &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;if ($tab_g[$i_g] &amp;lt;= $tab_d[$i_d]) &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;$res[$i] = $tab_g[$i_g++]; &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;else &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;$res[$i] = $tab_d[$i_d++]; &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;/* on copie le reste du tableau de gauche (s&amp;#39;il reste quelque chose) */ &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;while ($i_g &amp;lt; $taille_g) &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;$res[$i++] = $tab_g[$i_g++]; &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;/* pareil pour le tableau de droite */ &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;while ($i_d &amp;lt; $taille_d) &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;$res[$i++] = $tab_d[$i_d++]; &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;return $res; &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;} &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;?&amp;gt; &lt;/code&gt;&lt;/p&gt;\r\n&lt;/blockquote&gt;\r\n\r\n&lt;p&gt;On utilise une fonction&amp;nbsp;&lt;code&gt;copie&lt;/code&gt;&amp;nbsp;pour r&amp;eacute;cup&amp;eacute;rer chaque demi-tableau dans un tableau &amp;agrave; part, avant de les trier.&lt;/p&gt;\r\n\r\n&lt;pre&gt;\r\n\r\n&amp;nbsp;&lt;/pre&gt;\r\n\r\n&lt;blockquote&gt;\r\n&lt;p&gt;&lt;code&gt;&amp;lt;?php &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;function copie($tab, $debut, $fin) &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;{ &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;$res = array(); &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;for ($i = $debut; $i &amp;lt;= $fin; ++$i) &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;$res[$i - $debut] = $tab[$i]; &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;return $res; &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;} &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;?&amp;gt; &lt;/code&gt;&lt;/p&gt;\r\n&lt;/blockquote&gt;\r\n\r\n&lt;p&gt;On peut alors &amp;eacute;crire le tri entier.&lt;/p&gt;\r\n\r\n&lt;pre&gt;\r\n\r\n&amp;nbsp;&lt;/pre&gt;\r\n\r\n&lt;blockquote&gt;\r\n&lt;p&gt;&lt;code&gt;&amp;lt;?php &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;function tri_fusion($tab) &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;{ &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;$taille = count($tab); &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;if ($taille &amp;lt;= 1) &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;return $tab; &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;else { &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;$milieu = (int)($taille / 2); &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;$gauche = copie($tab, 0, $milieu-1); &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;$droite = copie($tab, $milieu, $taille-1); &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;return fusion(tri_fusion($gauche), tri_fusion($droite)); &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;} &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;} &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;// exemple : &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;$tab = array(1,5,4,3,6); &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;print_r(tri_fusion($tab)); &lt;/code&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;code&gt;?&amp;gt; &lt;/code&gt;&lt;/p&gt;\r\n&lt;/blockquote&gt;\r\n\r\n&lt;p&gt;&lt;strong&gt;Remarque :&lt;/strong&gt;&amp;nbsp;On a utilis&amp;eacute; une fonction&amp;nbsp;&lt;code&gt;copie&lt;/code&gt;&amp;nbsp;pour copier les deux demi-tableaux en dehors du tableau avant de les trier et de les fusionner. La proc&amp;eacute;dure fusion, elle aussi, cr&amp;eacute;e un nouveau tableau, qu&amp;#39;elle renvoie. On a donc allou&amp;eacute; de nouveaux tableaux, ce n&amp;#39;est pas un tri en place. Il est possible de faire mieux : on peut, en manipulant des indices au lieu de tableaux complets, trier les demi-tableau dans le tableau initial, ce qui le modifie mais permet de ne pas allouer de m&amp;eacute;moire suppl&amp;eacute;mentaire. Par contre, pour l&amp;#39;&amp;eacute;tape de fusion il faut tout de m&amp;ecirc;me copier des informations, par exemple les deux demi-tableaux tri&amp;eacute;s. Ce n&amp;#39;est toujours pas un tri en place. Il est en fait possible de recopier seulement le demi-tableau de gauche.&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;strong&gt;Exercice :&lt;/strong&gt;&amp;nbsp;&amp;Eacute;crire (dans le langage de votre choix) un tri fusion sur les tableaux ne recopiant que le demi-tableau de gauche. Pourquoi &amp;ccedil;a marche ?&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;strong&gt;Remarque :&lt;/strong&gt;&amp;nbsp;Il existe des version compl&amp;egrave;tement en place du tri fusion (sans aucune recopie), mais elles sont nettement plus compliqu&amp;eacute;es et souvent moins rapides. Il faut faire un compromis, et la simplicit&amp;eacute; est souvent le meilleur objectif.&lt;/p&gt;\r\n\r\n&lt;p&gt;Complexit&amp;eacute;&lt;/p&gt;\r\n\r\n&lt;p&gt;L&amp;#39;&amp;eacute;tude de la complexit&amp;eacute; du tri par fusion est assez simple. On commence avec une liste (ou un tableau) de N &amp;eacute;l&amp;eacute;ments. On le d&amp;eacute;coupe, ce qui fait deux tableaux de N/2 &amp;eacute;l&amp;eacute;ments. On les d&amp;eacute;coupe, ce qui fait 4 tableaux de N/4 &amp;eacute;l&amp;eacute;ments. On les d&amp;eacute;coupe, ce qui fait 8 tableaux ...&lt;/p&gt;\r\n\r\n&lt;p&gt;Quand est-ce que la phase de d&amp;eacute;coupage s&amp;#39;arr&amp;ecirc;te ? Quand on est arriv&amp;eacute; &amp;agrave; des tableaux de taille 1. Et combien de fois faut-il diviser N par 2 pour obtenir 1 ? On l&amp;#39;a d&amp;eacute;j&amp;agrave; vu, c&amp;#39;est la fonction logarithme ! En effet, si on a un tableau de taille 1, on renvoie le tableau en une seule op&amp;eacute;ration (f(0) = 1), et si on double la taille du tableau il faut faire une d&amp;eacute;coupe de plus (f(2*N) = f(N) + 1). C&amp;#39;est bien notre sympathique fonction du chapitre pr&amp;eacute;c&amp;eacute;dent. On a donc log(N) phases de &amp;quot;d&amp;eacute;coupe&amp;quot; successives.&lt;/p&gt;\r\n\r\n&lt;p&gt;Quel est le travail effectu&amp;eacute; &amp;agrave; chaque &amp;eacute;tape ? C&amp;#39;est le travail de fusion : apr&amp;egrave;s le tri, il faut fusionner les demi-listes. Notre algorithme de fusion est lin&amp;eacute;aire : on parcours les deux demi-listes une seule fois, donc la fusion de deux tableaux de taille N/2 est en O(N).&lt;/p&gt;\r\n\r\n&lt;p&gt;Vous allez s&amp;ucirc;rement me faire remarquer que plus on d&amp;eacute;coupe, plus on a de fusions &amp;agrave; faire : au bout de 4 &amp;eacute;tapes de d&amp;eacute;coupe, on se retrouve avec 16 tableaux &amp;agrave; fusionner ! Oui, mais ces tableaux sont petits, ils ont chacun N/16 &amp;eacute;l&amp;eacute;ment. Au total, on a donc 16 * N/16 = N op&amp;eacute;rations lors des fusions de ces tableaux : &amp;agrave; chaque &amp;eacute;tape, on a O(N) op&amp;eacute;rations de fusion.&lt;/p&gt;\r\n\r\n&lt;p&gt;On a donc log(N) &amp;eacute;tapes &amp;agrave; O(N) op&amp;eacute;rations chacune. Au total, cela nous fait donc O(N * log(N)) op&amp;eacute;rations : la complexit&amp;eacute; du tri fusion est en O(N * log(N)) (parfois not&amp;eacute; simplement O(N log N), la multiplication est sous-entendue).&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;img alt=&quot;Complexit&eacute; du tri par fusion&quot; src=&quot;https://user.oc-static.com/files/155001_156000/155760.png&quot; /&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;Efficacit&amp;eacute; en pratique&lt;/p&gt;\r\n\r\n&lt;p&gt;On est pass&amp;eacute;, en changeant d&amp;#39;algorithme, d&amp;#39;une complexit&amp;eacute; de O(N2) &amp;agrave; une complexit&amp;eacute; de O(N * log(N)). C&amp;#39;est bien gentil, mais est-ce si g&amp;eacute;nial que &amp;ccedil;a ?&lt;/p&gt;\r\n\r\n&lt;p&gt;La r&amp;eacute;ponse est&amp;nbsp;&lt;strong&gt;oui&lt;/strong&gt;&amp;nbsp;: O(N log(N)) &amp;ccedil;a va&amp;nbsp;&lt;em&gt;vraiment&lt;/em&gt;&amp;nbsp;beaucoup plus vite. Pour vous en convaincre, voici des timings concrets comparant une impl&amp;eacute;mentation du tri par s&amp;eacute;lection (avec des tableaux) et du tri par fusion (avec des listes), le tout dans le m&amp;ecirc;me langage de programmation et sur le m&amp;ecirc;me (vieil) ordinateur pour pouvoir comparer :&lt;/p&gt;\r\n\r\n&lt;table&gt;\r\n	&lt;thead&gt;\r\n		&lt;tr&gt;\r\n			&lt;th&gt;\r\n			&lt;p&gt;N&lt;/p&gt;\r\n			&lt;/th&gt;\r\n			&lt;th&gt;\r\n			&lt;p&gt;s&amp;eacute;lection&lt;/p&gt;\r\n			&lt;/th&gt;\r\n			&lt;th&gt;\r\n			&lt;p&gt;fusion&lt;/p&gt;\r\n			&lt;/th&gt;\r\n		&lt;/tr&gt;\r\n	&lt;/thead&gt;\r\n	&lt;tbody&gt;\r\n		&lt;tr&gt;\r\n			&lt;td&gt;\r\n			&lt;p&gt;100&lt;/p&gt;\r\n			&lt;/td&gt;\r\n			&lt;td&gt;\r\n			&lt;p&gt;0.006s&lt;/p&gt;\r\n			&lt;/td&gt;\r\n			&lt;td&gt;\r\n			&lt;p&gt;0.006s&lt;/p&gt;\r\n			&lt;/td&gt;\r\n		&lt;/tr&gt;\r\n		&lt;tr&gt;\r\n			&lt;td&gt;\r\n			&lt;p&gt;1000&lt;/p&gt;\r\n			&lt;/td&gt;\r\n			&lt;td&gt;\r\n			&lt;p&gt;0.069s&lt;/p&gt;\r\n			&lt;/td&gt;\r\n			&lt;td&gt;\r\n			&lt;p&gt;0.010s&lt;/p&gt;\r\n			&lt;/td&gt;\r\n		&lt;/tr&gt;\r\n		&lt;tr&gt;\r\n			&lt;td&gt;\r\n			&lt;p&gt;10 000&lt;/p&gt;\r\n			&lt;/td&gt;\r\n			&lt;td&gt;\r\n			&lt;p&gt;2.162s&lt;/p&gt;\r\n			&lt;/td&gt;\r\n			&lt;td&gt;\r\n			&lt;p&gt;0.165s&lt;/p&gt;\r\n			&lt;/td&gt;\r\n		&lt;/tr&gt;\r\n		&lt;tr&gt;\r\n			&lt;td&gt;\r\n			&lt;p&gt;20 000&lt;/p&gt;\r\n			&lt;/td&gt;\r\n			&lt;td&gt;\r\n			&lt;p&gt;7.526s&lt;/p&gt;\r\n			&lt;/td&gt;\r\n			&lt;td&gt;\r\n			&lt;p&gt;0.326s&lt;/p&gt;\r\n			&lt;/td&gt;\r\n		&lt;/tr&gt;\r\n		&lt;tr&gt;\r\n			&lt;td&gt;\r\n			&lt;p&gt;40 000&lt;/p&gt;\r\n			&lt;/td&gt;\r\n			&lt;td&gt;\r\n			&lt;p&gt;28.682s&lt;/p&gt;\r\n			&lt;/td&gt;\r\n			&lt;td&gt;\r\n			&lt;p&gt;0.541s&lt;/p&gt;\r\n			&lt;/td&gt;\r\n		&lt;/tr&gt;\r\n	&lt;/tbody&gt;\r\n&lt;/table&gt;\r\n\r\n&lt;p&gt;Les mesures confirment ce que nous avons expliqu&amp;eacute; jusqu&amp;#39;&amp;agrave; pr&amp;eacute;sent. On parle bien d&amp;#39;une complexit&amp;eacute;&amp;nbsp;&lt;em&gt;asymptotique&lt;/em&gt;, pour des N grands. Quand N est petit, les deux algorithmes sont &amp;agrave; peu pr&amp;egrave;s &amp;eacute;quivalents (pour un petit nombre d&amp;#39;&amp;eacute;l&amp;eacute;ments, le tri par insertion va m&amp;ecirc;me un peu plus vite que le tri par fusion). La diff&amp;eacute;rence se fait sur de grandes valeurs, mais surtout elle caract&amp;eacute;rise l&amp;#39;&lt;em&gt;&amp;eacute;volution&lt;/em&gt;&amp;nbsp;des performances quand les demandes changent. Avec une complexit&amp;eacute; de O(N2 ), si on double la taille de l&amp;#39;entr&amp;eacute;e, le tri par s&amp;eacute;lection va environ 4 fois plus lentement (c&amp;#39;est assez bien v&amp;eacute;rifi&amp;eacute; sur nos exemples). Avec une complexit&amp;eacute; de O(N * log(N)), cela va seulement un peu plus de 2 fois plus lentement environ (vu les petits temps de calcul, les mesures sont plus sensibles aux variations, donc moins fiables).&lt;/p&gt;\r\n\r\n&lt;p&gt;En extrapolant ce comportement, on obtient sur de tr&amp;egrave;s grandes donn&amp;eacute;es un foss&amp;eacute; absolument gigantesque. Par exemple, dans ce cas pr&amp;eacute;cis, le tri fusion sur 10 millions d&amp;#39;&amp;eacute;l&amp;eacute;ments devrait prendre environ une demi heure, alors que pour un tri par s&amp;eacute;lection il vous faudra... un an et demi.&lt;/p&gt;\r\n\r\n&lt;p&gt;Ce genre de diff&amp;eacute;rences n&amp;#39;est pas un cas rare. On est pass&amp;eacute; d&amp;#39;un facteur N &amp;agrave; un facteur log(N), ce qui est plut&amp;ocirc;t courant quand on passe d&amp;#39;un code &amp;quot;na&amp;iuml;f&amp;quot; (sans r&amp;eacute;flexion algorithmique) &amp;agrave; quelque chose d&amp;#39;un peu mieux pens&amp;eacute;. Cela vous donne une id&amp;eacute;e des gains que peut vous apporter une connaissance de l&amp;#39;algorithmique.&lt;/p&gt;\r\n\r\n&lt;p&gt;Le passage des tris quadratique aux tri par fusion &amp;eacute;tait impressionnant. Est-ce que dans le prochain chapitre, je vais encore vous d&amp;eacute;coiffer avec quelque chose d&amp;#39;encore plus magique ? Un tri en O(log(N)) ? Un tri qui renvoie la sortie avant qu&amp;#39;on lui ai donn&amp;eacute; l&amp;#39;entr&amp;eacute;e ?&lt;/p&gt;\r\n\r\n&lt;p&gt;La r&amp;eacute;ponse est non. On dit que le tri fusion est &amp;quot;optimal&amp;quot; parmi les tris par comparaison, c&amp;#39;est &amp;agrave; dire qui trient en comparant les &amp;eacute;l&amp;eacute;ment deux par deux. Si on ne conna&amp;icirc;t rien des donn&amp;eacute;es que l&amp;#39;on trie, on ne peut pas les trier avec une meilleure complexit&amp;eacute;. Si l&amp;#39;on avait des informations suppl&amp;eacute;mentaires, on pourrait peut-&amp;ecirc;tre faire mieux (par exemple si on sait que toutes les valeurs sont &amp;eacute;gales, bah on ne s&amp;#39;emb&amp;ecirc;te pas, on renvoie la liste directement), mais pas dans le cas g&amp;eacute;n&amp;eacute;ral. Ce r&amp;eacute;sultat assez &amp;eacute;tonnant sera montr&amp;eacute; dans la derni&amp;egrave;re partie de ce tutoriel (qui n&amp;#39;est pas encore &amp;eacute;crite : vous devrez attendre).&lt;/p&gt;\r\n\r\n&lt;p&gt;&amp;Ccedil;a ne veut pas dire que le tri par fusion est le meilleur tri qui existe. Il existe d&amp;#39;autres tris (de la m&amp;ecirc;me complexit&amp;eacute;, voire parfois moins bonne dans le pire des cas) qui sont plus rapides en pratique. Mais d&amp;#39;un point de vue algorithmique, vous ne pourrez pas faire beaucoup mieux.&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;strong&gt;Remarque&lt;/strong&gt;&amp;nbsp;: c&amp;#39;est le moment de mentionner un petit d&amp;eacute;tail int&amp;eacute;ressant, qui sort du cadre de l&amp;#39;algorithmique proprement dite. On a d&amp;eacute;j&amp;agrave; expliqu&amp;eacute; que la mesure de la complexit&amp;eacute; &amp;eacute;tait de nature&amp;nbsp;&lt;em&gt;asymptotique&lt;/em&gt;, c&amp;#39;est &amp;agrave; dire qu&amp;#39;elle n&amp;#39;&amp;eacute;tait pertinente que pour de grandes valeurs, &amp;agrave; une constante multiplicative pr&amp;egrave;s. Il se trouve que pour des petites valeurs (disons jusqu&amp;#39;&amp;agrave; 20, 50 ou 100 &amp;eacute;l&amp;eacute;ments par exemple), le tri par insertion, bien que quadratique, est tr&amp;egrave;s efficace en pratique.&lt;/p&gt;\r\n\r\n&lt;p&gt;On peut donc donner un petit coup de pouce au tri par fusion de la mani&amp;egrave;re suivante : au lieu de couper la liste en deux jusqu&amp;#39;&amp;agrave; qu&amp;#39;elle n&amp;#39;ait plus qu&amp;#39;un seul &amp;eacute;l&amp;eacute;ment, on la coupe jusqu&amp;#39;&amp;agrave; qu&amp;#39;elle ait un petit nombre d&amp;#39;&amp;eacute;l&amp;eacute;ments, et ensuite on applique un tri par insertion. Comme on n&amp;#39;a chang&amp;eacute; l&amp;#39;algorithme que pour les &amp;quot;petites valeurs&amp;quot;, le comportement asymptotique est le m&amp;ecirc;me et la complexit&amp;eacute; ne change pas, mais cette variante est un peu plus rapide.&lt;/p&gt;\r\n\r\n&lt;p&gt;Ce genre de petits d&amp;eacute;tails, qui marchent tr&amp;egrave;s bien en pratique, sont l&amp;agrave; pour nous emp&amp;ecirc;cher d&amp;#39;oublier que l&amp;#39;approche algorithmique n&amp;#39;est pas la r&amp;eacute;ponse &amp;agrave;&amp;nbsp;&lt;em&gt;toutes&lt;/em&gt;&amp;nbsp;les questions de l&amp;#39;informatique. C&amp;#39;est un outil parmi d&amp;#39;autres, m&amp;ecirc;me si son importance est capitale.&lt;/p&gt;\r\n\r\n&lt;p&gt;Je pense que vous avez maintenant acquis les bases de l&amp;#39;algorithmique. Si vous avez bien compris tout ce qui a &amp;eacute;t&amp;eacute; dit jusque l&amp;agrave;, vous devriez &amp;ecirc;tre capable de vous faire vous-m&amp;ecirc;me une id&amp;eacute;e sur la complexit&amp;eacute; des algorithmes simples, et d&amp;#39;int&amp;eacute;grer cette r&amp;eacute;flexion dans votre mani&amp;egrave;re de programmer.&lt;/p&gt;\r\n\r\n&lt;p&gt;Ne vous attendez pas cependant &amp;agrave; faire des merveilles d&amp;egrave;s maintenant. Le &amp;quot;sens de la complexit&amp;eacute;&amp;quot; (la capacit&amp;eacute; &amp;agrave; &amp;eacute;valuer la complexit&amp;eacute; de son travail, sans forc&amp;eacute;ment rentrer dans des pr&amp;eacute;cisions formelles pointues) demande de la pratique, il faut que cela devienne une habitude. Dans la prochaine partie, nous vous pr&amp;eacute;senterons d&amp;#39;autres algorithmes courants, que vous rencontrerez sans doute dans de nombreuses situations, et qui agrandiront donc &amp;agrave; la fois votre trousse &amp;agrave; outils algorithmique, et votre capacit&amp;eacute; &amp;agrave; estimer les complexit&amp;eacute;s.&lt;/p&gt;\r\n\r\n&lt;p&gt;Le choix du cours est donc le suivant : restez sur votre chaise, lisez (... quand ils seront disponibles !) les prochains chapitres, faites les exercices propos&amp;eacute;s (et d&amp;#39;autres en plus si vous voulez), et vous apprendrez beaucoup de chose. Il y a d&amp;#39;autres sources d&amp;#39;informations disponibles (... et oui, tout ne se r&amp;eacute;sume pas au Site du Z&amp;eacute;ro !), et je voudrais en mentionner une en particulier :&amp;nbsp;&lt;a href=&quot;http://www.france-ioi.org/&quot;&gt;France-IOI&lt;/a&gt;. C&amp;#39;est une association qui pr&amp;eacute;pare, &amp;agrave; travers une s&amp;eacute;rie d&amp;#39;exercices d&amp;#39;algorithmiques, &amp;agrave; des comp&amp;eacute;titions d&amp;#39;informatique. Ce ne sont pas les comp&amp;eacute;titions qui m&amp;#39;int&amp;eacute;ressent ici, mais leurs exercices : ils sont vari&amp;eacute;s, formateurs, et corrig&amp;eacute;s avec soin. Leur id&amp;eacute;e est de former les visiteurs &amp;agrave; l&amp;#39;algorithmique &amp;agrave; travers une s&amp;eacute;rie d&amp;#39;exercice progressifs &amp;agrave; chercher.&lt;/p&gt;\r\n\r\n&lt;p&gt;Si vous avez envie d&amp;#39;un peu de pratique, n&amp;#39;h&amp;eacute;sitez pas &amp;agrave; y jeter un coup d&amp;#39;oeil. Bien s&amp;ucirc;r, le concept n&amp;#39;est pas unique et il existe d&amp;#39;autres sites d&amp;#39;exercices (comme&amp;nbsp;&lt;a href=&quot;https://projecteuler.net/&quot;&gt;Project Euler&lt;/a&gt;, qui est malheureusement plus orient&amp;eacute; math&amp;eacute;matiques) et de descriptions d&amp;#39;algorithmes (par exemple la wikip&amp;eacute;dia). N&amp;#39;h&amp;eacute;sitez pas &amp;agrave; vous renseigner et travailler par vous-m&amp;ecirc;me.&lt;/p&gt;\r\n', 8, 2);

-- --------------------------------------------------------

--
-- Structure de la table `participateqcm`
--

CREATE TABLE IF NOT EXISTS `participateqcm` (
  `id` int(255) NOT NULL AUTO_INCREMENT,
  `idUser` int(255) NOT NULL,
  `idQCM` int(255) NOT NULL,
  `mark` float NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Structure de la table `qcm`
--

CREATE TABLE IF NOT EXISTS `qcm` (
  `id` int(20) NOT NULL AUTO_INCREMENT,
  `teacher` int(20) NOT NULL,
  `label` varchar(200) NOT NULL,
  `classe` int(20) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Structure de la table `questionqcm`
--

CREATE TABLE IF NOT EXISTS `questionqcm` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `question` varchar(500) NOT NULL,
  `answer1` varchar(500) NOT NULL,
  `answer2` varchar(500) NOT NULL,
  `answer3` varchar(500) DEFAULT NULL,
  `answer4` varchar(500) DEFAULT NULL,
  `result` int(11) NOT NULL,
  `idQCM` int(11) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Structure de la table `schedulecourse`
--

CREATE TABLE IF NOT EXISTS `schedulecourse` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `matiere` varchar(255) NOT NULL,
  `room` varchar(255) NOT NULL,
  `startHour` varchar(255) NOT NULL,
  `day` int(11) NOT NULL,
  `week` int(11) NOT NULL,
  `classID` int(11) NOT NULL,
  `userID` int(11) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=32 ;

--
-- Contenu de la table `schedulecourse`
--

INSERT INTO `schedulecourse` (`id`, `matiere`, `room`, `startHour`, `day`, `week`, `classID`, `userID`) VALUES
(3, 'Fran&ccedil;ais', 'A205', '08:00', 23, 30, 14, 6),
(4, 'Histoire', 'D02', '08:00', 23, 30, 12, 7),
(5, 'Fran&ccedil;ais', 'A205', '09:15', 23, 30, 14, 6),
(6, 'G&eacute;ographie', 'D04', '09:15', 23, 30, 12, 7),
(7, 'Philosophie', 'A304', '16:15', 23, 30, 14, 7),
(8, 'Histoire G&eacute;ographie', 'B22', '10:30', 24, 30, 14, 8),
(9, 'Anglais', 'C12', '10:30', 23, 30, 12, 9),
(10, 'Histoire G&eacute;ographie', 'B22', '11:45', 24, 30, 14, 8),
(11, 'Maths', 'B22', '09:15', 24, 30, 12, 6),
(12, 'Arts plastiques', 'C3', '17:30', 24, 30, 14, 9),
(13, 'SVT', 'B26', '10:30', 25, 30, 12, 8),
(14, 'Anglais', 'A023', '11:45', 25, 30, 14, 6),
(15, 'SVT', 'B26', '15:00', 24, 30, 12, 8),
(16, 'Allemand', 'B002', '15:00', 25, 30, 14, 8),
(17, 'Maths', 'B02', '09:15', 26, 30, 12, 7),
(18, 'Philosophie', 'A205', '09:15', 26, 30, 14, 7),
(19, 'Espagnol', 'E11', '10:30', 27, 30, 12, 8),
(20, 'G&eacute;ographie', 'C15', '11:45', 27, 30, 12, 8),
(21, 'Philosophie', 'S14', '15:00', 25, 30, 12, 7),
(22, 'Philosophie', 'C13', '08:00', 30, 31, 12, 7),
(23, 'Maths', 'C10', '16:15', 25, 30, 12, 8),
(24, 'Sciences', 'S14', '09:15', 24, 30, 13, 8),
(25, 'Economie', 'E14', '10:30', 24, 30, 13, 9),
(26, 'Maths', 'C02', '10:30', 25, 30, 13, 7),
(27, 'Anglais', 'E14', '10:30', 26, 30, 13, 8),
(28, 'Espagnol', 'E15', '09:15', 27, 30, 13, 6),
(29, 'SES', 'C19', '15:00', 24, 30, 13, 9),
(30, 'SES', 'S13', '15:00', 27, 30, 13, 8),
(31, 'Conf. M&eacute;tiers', 'Salle Polyvalante', '15:00', 26, 30, 13, 7);

-- --------------------------------------------------------

--
-- Structure de la table `schedulesettings`
--

CREATE TABLE IF NOT EXISTS `schedulesettings` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `days` int(11) NOT NULL,
  `firstHour` varchar(255) NOT NULL,
  `lastHour` varchar(255) NOT NULL,
  `lunchHour` varchar(255) NOT NULL,
  `lunchTime` varchar(255) NOT NULL,
  `courseTime` varchar(255) NOT NULL,
  `nbCoursePerDay` int(11) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=2 ;

--
-- Contenu de la table `schedulesettings`
--

INSERT INTO `schedulesettings` (`id`, `days`, `firstHour`, `lastHour`, `lunchHour`, `lunchTime`, `courseTime`, `nbCoursePerDay`) VALUES
(1, 5, '08:00', '20:00', '13:00', '02:00', '01:15', 8);

-- --------------------------------------------------------

--
-- Structure de la table `settings`
--

CREATE TABLE IF NOT EXISTS `settings` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `sitename` varchar(200) NOT NULL,
  `address` varchar(255) DEFAULT NULL,
  `logo` mediumtext NOT NULL,
  `theme` varchar(255) NOT NULL DEFAULT 'default',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=2 ;

--
-- Contenu de la table `settings`
--

INSERT INTO `settings` (`id`, `sitename`, `address`, `logo`, `theme`) VALUES
(1, 'ESGI', '254 Rue du Faubourg Saint-Antoine, 75012 Paris 0198341092', 'LOGO-ESGI-300x203.jpg', 'default');

-- --------------------------------------------------------

--
-- Structure de la table `user`
--

CREATE TABLE IF NOT EXISTS `user` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `firstname` varchar(100) NOT NULL,
  `lastname` varchar(100) NOT NULL,
  `email` varchar(250) NOT NULL,
  `pwd` char(60) NOT NULL,
  `token` char(15) DEFAULT NULL,
  `rank` int(11) DEFAULT NULL,
  `status` int(1) NOT NULL DEFAULT '1',
  `classe` int(10) DEFAULT NULL,
  `date_inserted` varchar(100) DEFAULT NULL,
  `date_created` timestamp NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP,
  `pwd_changed` int(11) NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=83 ;

--
-- Contenu de la table `user`
--

INSERT INTO `user` (`id`, `firstname`, `lastname`, `email`, `pwd`, `token`, `rank`, `status`, `classe`, `date_inserted`, `date_created`, `pwd_changed`) VALUES
(1, 'Admin1', 'EDULAB', 'admin1@test.fr', '$2y$10$CpTNQpA7bmLPKGfYVrW.Zetq1zIAnUOOVRx3joAuy11/sFFT7Ql96', '966c0759d96f755', 2, 1, 0, NULL, '2018-07-23 15:47:38', 0),
(2, 'Admin', 'EDULAB', 'admin@test.fr', '$2y$10$CpTNQpA7bmLPKGfYVrW.Zetq1zIAnUOOVRx3joAuy11/sFFT7Ql96', '57bb5e094685429', 2, 0, NULL, '2018-04-23 14:41:56', '2018-07-23 16:19:27', 1),
(6, 'Teacher', 'EDULAB', 'teacher@test.fr', '$2y$10$CpTNQpA7bmLPKGfYVrW.Zetq1zIAnUOOVRx3joAuy11/sFFT7Ql96', 'f83809fd5f98716', 2, 1, NULL, '2018-04-23 15:54:57', '2018-07-23 15:43:59', 0),
(7, 'Teacher1', 'EDULAB', 'teacher1@test.fr', '$2y$10$CpTNQpA7bmLPKGfYVrW.Zetq1zIAnUOOVRx3joAuy11/sFFT7Ql96', 'e1103cba8ce04b1', 2, 1, NULL, '2018-04-23 16:15:48', '2018-07-23 16:23:22', 0),
(8, 'Teacher2', 'EDULAB', 'teacher2@test.fr', '$2y$10$CpTNQpA7bmLPKGfYVrW.Zetq1zIAnUOOVRx3joAuy11/sFFT7Ql96', '0f56ce2d5e0ce62', 2, 1, NULL, '2018-04-23 15:54:57', '2018-07-23 16:06:45', 0),
(9, 'Teacher3', 'EDULAB', 'teacher3@test.fr', '$2y$10$CpTNQpA7bmLPKGfYVrW.Zetq1zIAnUOOVRx3joAuy11/sFFT7Ql96', NULL, 2, 1, NULL, '2018-04-23 15:54:57', '2018-04-24 19:01:56', 0),
(10, 'Teacher4', 'EDULAB', 'teacher4@test.fr', '$2y$10$CpTNQpA7bmLPKGfYVrW.Zetq1zIAnUOOVRx3joAuy11/sFFT7Ql96', '0302740330d5b6a', 2, 0, NULL, '2018-04-23 15:54:57', '2018-07-23 16:21:24', 0),
(11, 'Teacher5', 'EDULAB', 'teacher5@tetst.fr', '$2y$10$qwbwy9/L.N53gmGjI17EU.UvIDmmxzbxmfto5qy7CkpZHh8aa7VpG', '7bfa713ba3c357f', 2, 0, NULL, '2018-04-24 18:42:30', '2018-07-21 16:57:25', 0),
(12, 'Student1', 'EDULAB', 'student1@test.fr', '$2y$10$CpTNQpA7bmLPKGfYVrW.Zetq1zIAnUOOVRx3joAuy11/sFFT7Ql96', 'de7d4a96ebd7702', 3, 1, 14, '2018-04-26 09:13:51', '2018-07-23 15:43:40', 0),
(13, 'Student2', 'EDULAB', 'student2@test.fr', '$2y$10$CpTNQpA7bmLPKGfYVrW.Zetq1zIAnUOOVRx3joAuy11/sFFT7Ql96', 'b1166de71e9312b', 3, 1, 14, '2018-04-26 11:43:31', '2018-07-22 15:22:45', 0),
(14, 'Student3', 'EDULAB', 'student3@test.fr', '$2y$10$CpTNQpA7bmLPKGfYVrW.Zetq1zIAnUOOVRx3joAuy11/sFFT7Ql96', 'dda57f55c058fcf', 3, 1, 12, '2018-04-28 16:33:18', '2018-07-23 15:48:41', 0),
(15, 'Student4', 'EDULAB', 'student4@test.fr', '$2y$10$40KKHvCPw9dSZdbEcHbAX.FxuZymrQLkgHTGIOsWhylEjs8JNR//C', 'd8d5bd1e7c46ffc', 3, 1, 15, '2018-04-28 16:45:18', '2018-07-23 16:22:49', 0),
(16, 'Student5', 'EDULAB', 'student5@test.fr', '$2y$10$kxNptCvYR1Vo2.50LY86cOpF.kd5S48O9B4i9f.RFib6fKLgKbd/a', 'b3e75245f008348', 3, 1, 15, '2018-04-28 16:47:04', '2018-07-23 16:22:49', 0),
(17, 'Student6', 'EDULAB', 'student6@test.fr', '$2y$10$S.5K.eQbPqA9e9Xc0C8VXOKuZNfeaYZt9iVz991jScbRLHfeUWU6K', '9960d73c7cc9951', 3, 1, 15, '2018-04-28 17:32:09', '2018-07-23 16:22:49', 0),
(18, 'Student7', 'EDULAB', 'student7@test.fr', '$2y$10$hJny31M1mpJr0fMr0xmz8eXjZXc5ClhcAJqYaxT6WB.8iyxnG39UK', '0433890b5aca277', 3, 1, 12, '2018-04-28 17:34:14', '2018-04-29 15:10:18', 0),
(19, 'Student8', 'EDULAB', 'student8@test.fr', '$2y$10$GHaCzAHXgSMo0LgftNbLvuqak8DltTaOkwqDFKTgykn8HFYMceMkK', 'b8e1654778f1045', 3, 1, 13, '2018-04-28 17:37:24', '2018-04-29 15:39:50', 0),
(20, 'Student9', 'EDULAB', 'student9@test.fr', '$2y$10$P5c1229g3k3SRLheuKXaYuiLN9eNJy1ayrRwciUnVYtoTKW6rQeBW', 'bf0ed08ff3bb4e7', 3, 1, 13, '2018-04-29 15:47:41', '2018-04-29 15:39:50', 0),
(79, 'Valentin', 'VARVEROPOULOS', 'valentin.varveropoulos@hotmail.fr', '$2y$10$nmLNZC1U/P3ZAchSR4EbXuQp.Re9o8BnOemXouSKLlVP8iYchRigm', 'f50268bef2511ec', 3, 0, 0, NULL, '2018-07-22 18:21:03', 0),
(80, 'Valentin', 'VARVEROPOULOS', 'poulos.gg@hotmail.fr', '$2y$10$EGTKG0aJyQaFwqZOi/kgrePfExNZcrUieLx2P/AdLoZGr8UVw3wnu', '131df3ae5e6b12c', 3, 1, 0, NULL, '2018-07-23 15:46:01', 0),
(81, 'Audric', 'MATI', 'audricmati@gmail.com', '$2y$10$d30K/q4y.CfKjdxb.yHm/.70fwe.YgcQWy02qiGpKwxsJel3DrtBO', 'ea96225a8fa5bc8', 2, 1, 0, NULL, '2018-07-23 16:23:12', 1),
(82, 'Adrien', 'MICHEL', 'adrien.michel96@gmail.com', '$2y$10$Rc3lH9yEJ01HCRIiuZJnBex6OCQscSXvdJhLwZmZ074OpRY/cNdVW', 'ad58d509bfd5dba', 3, 1, 0, NULL, '2018-07-23 15:52:56', 0);

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
